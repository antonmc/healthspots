/*!
 *  Licensed Materials - Property of IBM
 *  5725-I43 (C) Copyright IBM Corp. 2011, 2014. All Rights Reserved.
 *  US Government Users Restricted Rights - Use, duplication or
 *  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 *
 *  IBM Mobile Cloud Services JavaScript SDK, v1.0.0.20150720-1718
 *
 */


// Global To handle name parameters based selection of require depending on runtime
var isNode = typeof __isNode === "boolean" ? __isNode : typeof exports === "object";

// Dynamically Prepare the correct XHR option
var xhrMod = null;
var yamljs = null;
var shelljs = null;
var fs = null;
var path = null;

if(isNode) {
	// Dynamically Load the Request Module
	xhrMod = require('request');
	if(!xhrMod) {
		console.log("Could not load Node.js 'request' module")
	}

	// Dynamically Load the shelljs Module
	shelljs = require('shelljs/global');
	if(!shelljs) {
		console.log("Could not load Node.js 'shelljs' module")
	}
	
	// Dynamically Load the yaml-js Module
	yamljs = require('yaml-js');
	if(!yamljs) {
		console.log("Could not load Node.js 'yaml-js' module")
	}
	
	// Dynamically Load the fs Module
	fs = require('fs');
	if(!fs) {
		console.log("Could not load Node.js 'fs' module")
	}
	
	path = require('path');
	if(!path) {
		console.log("Could not load Node.js 'path' module")
	}

}

// Generated by IBMBluemix SDK v0.6.20 - template: 'combined' 
// Combined template optimized with RequireJS/r.js v2.1.19 & almond.
(function (global, window){
  
var __isAMD = !!(typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;

  var __nodeRequire = (__isNode ? require :
      function(dep){
        throw new Error("IBMBluemix SDK detected missing dependency: '" + dep + "' - in a non-nodejs runtime. All it's binding variables were 'undefined'.")
      });
var bundleFactory = function() {/**
 * @license almond 0.2.9 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/almond for details
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*jslint sloppy: true */
/*global setTimeout: false */

var requirejs, require, define;
/* istanbul ignore next */
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        hasOwn = Object.prototype.hasOwnProperty,
        aps = [].slice,
        jsSuffixRegExp = /\.js$/;

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap, lastIndex,
            foundI, foundStarMap, starI, i, j, part,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name && name.charAt(0) === ".") {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that "directory" and not name of the baseName's
                //module. For instance, baseName of "one/two/three", maps to
                //"one/two/three.js", but we want the directory, "one/two" for
                //this normalization.
                baseParts = baseParts.slice(0, baseParts.length - 1);
                name = name.split('/');
                lastIndex = name.length - 1;

                // Node .js allowance:
                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
                }

                name = baseParts.concat(name);

                //start trimDots
                for (i = 0; i < name.length; i += 1) {
                    part = name[i];
                    if (part === ".") {
                        name.splice(i, 1);
                        i -= 1;
                    } else if (part === "..") {
                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
                            //End of the line. Keep at least one non-dot
                            //path segment at the front so it can be mapped
                            //correctly to disk. Otherwise, there is likely
                            //no path mapping for a path starting with '..'.
                            //This can still fail, but catches the most reasonable
                            //uses of ..
                            break;
                        } else if (i > 0) {
                            name.splice(i - 1, 2);
                            i -= 2;
                        }
                    }
                }
                //end trimDots

                name = name.join("/");
            } else if (name.indexOf('./') === 0) {
                // No baseName, so this is ID is resolved relative
                // to baseUrl, pull off the leading dot.
                name = name.substring(2);
            }
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (hasProp(waiting, name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!hasProp(defined, name) && !hasProp(defining, name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relName) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relName));
            } else {
                name = normalize(name, relName);
            }
        } else {
            name = normalize(name, relName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i,
            args = [],
            callbackType = typeof callback,
            usingExports;

        //Use name if no relName
        relName = relName || name;

        //Call the callback to define the module, if necessary.
        if (callbackType === 'undefined' || callbackType === 'function') {
            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relName);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) ||
                           hasProp(waiting, depName) ||
                           hasProp(defining, depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback ? callback.apply(defined[name], args) : undefined;

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                        cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, callback).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (config.deps) {
                req(config.deps, config.callback);
            }
            if (!callback) {
                return;
            }

            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            //Using a non-zero value because of concern for what old browsers
            //do, and latest browsers "upgrade" to 4 if lower value is used:
            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
            //If want a value immediately, use require('id') instead -- something
            //that works in almond on the global level, but not guaranteed and
            //unlikely to work in other AMD implementations.
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 4);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        return req(cfg);
    };

    /**
     * Expose module registry for debugging and tooling
     */
    requirejs._defined = defined;

    define = function (name, deps, callback) {

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
            waiting[name] = [name, deps, callback];
        }
    };

    define.amd = {
        jQuery: true
    };
}());

define("almond", function(){});

define('request',[],function () {
  if (__isNode) {
  return __nodeRequire('request');
} else {
  throw new Error("IBMBluemix SDK: trying to access unbound / excluded 'node-only' dependency 'request') on browser");
}
});
define('shelljs/global',[],function () {
  if (__isNode) {
  return __nodeRequire('shelljs/global');
} else {
  throw new Error("IBMBluemix SDK: trying to access unbound / excluded 'node-only' dependency 'shelljs/global') on browser");
}
});
define('yaml-js',[],function () {
  if (__isNode) {
  return __nodeRequire('yaml-js');
} else {
  throw new Error("IBMBluemix SDK: trying to access unbound / excluded 'node-only' dependency 'yaml-js') on browser");
}
});
define('fs',[],function () {
  if (__isNode) {
  return __nodeRequire('fs');
} else {
  throw new Error("IBMBluemix SDK: trying to access unbound / excluded 'node-only' dependency 'fs') on browser");
}
});
define('path',[],function () {
  if (__isNode) {
  return __nodeRequire('path');
} else {
  throw new Error("IBMBluemix SDK: trying to access unbound / excluded 'node-only' dependency 'path') on browser");
}
});
/* istanbul ignore next */
define('ibm/mobile/lib/IBMUnderscore', ['require','exports','module'],function (require, exports, module) {
  var __umodule__ = (function (require, exports, module) {
  

var root = this;
  var previousUnderscore = root._;
  var breaker = {};
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;
  var push = ArrayProto.push, slice = ArrayProto.slice, concat = ArrayProto.concat, toString = ObjProto.toString, hasOwnProperty = ObjProto.hasOwnProperty;
  var nativeForEach = ArrayProto.forEach, nativeMap = ArrayProto.map, nativeReduce = ArrayProto.reduce, nativeReduceRight = ArrayProto.reduceRight, nativeFilter = ArrayProto.filter, nativeEvery = ArrayProto.every, nativeSome = ArrayProto.some, nativeIndexOf = ArrayProto.indexOf, nativeLastIndexOf = ArrayProto.lastIndexOf, nativeIsArray = Array.isArray, nativeKeys = Object.keys, nativeBind = FuncProto.bind;
  var _ = function (obj) {
    if (obj instanceof _)
      return obj;
    if (!(this instanceof _))
      return new _(obj);
    this._wrapped = obj;
  };
  if (typeof exports !== "undefined") {
    if (typeof module !== "undefined" && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }
  _.VERSION = "1.6.0";
  var each = _.each = _.forEach = function (obj, iterator, context) {
    if (obj == null)
      return obj;
    if (nativeForEach && obj.forEach === nativeForEach) {
      obj.forEach(iterator, context);
    } else if (obj.length === +obj.length) {
      for (var i = 0, length = obj.length; i < length; i++) {
        if (iterator.call(context, obj[i], i, obj) === breaker)
          return;
      }
    } else {
      var keys = _.keys(obj);
      for (var i = 0, length = keys.length; i < length; i++) {
        if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker)
          return;
      }
    }
    return obj;
  };
  _.map = _.collect = function (obj, iterator, context) {
    var results = [];
    if (obj == null)
      return results;
    if (nativeMap && obj.map === nativeMap)
      return obj.map(iterator, context);
    each(obj, function (value, index, list) {
      results.push(iterator.call(context, value, index, list));
    });
    return results;
  };
  var reduceError = "Reduce of empty array with no initial value";
  _.reduce = _.foldl = _.inject = function (obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null)
      obj = [];
    if (nativeReduce && obj.reduce === nativeReduce) {
      if (context)
        iterator = _.bind(iterator, context);
      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
    }
    each(obj, function (value, index, list) {
      if (!initial) {
        memo = value;
        initial = true;
      } else {
        memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial)
      throw new TypeError(reduceError);
    return memo;
  };
  _.reduceRight = _.foldr = function (obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null)
      obj = [];
    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
      if (context)
        iterator = _.bind(iterator, context);
      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
    }
    var length = obj.length;
    if (length !== +length) {
      var keys = _.keys(obj);
      length = keys.length;
    }
    each(obj, function (value, index, list) {
      index = keys ? keys[--length] : --length;
      if (!initial) {
        memo = obj[index];
        initial = true;
      } else {
        memo = iterator.call(context, memo, obj[index], index, list);
      }
    });
    if (!initial)
      throw new TypeError(reduceError);
    return memo;
  };
  _.find = _.detect = function (obj, predicate, context) {
    var result;
    any(obj, function (value, index, list) {
      if (predicate.call(context, value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };
  _.filter = _.select = function (obj, predicate, context) {
    var results = [];
    if (obj == null)
      return results;
    if (nativeFilter && obj.filter === nativeFilter)
      return obj.filter(predicate, context);
    each(obj, function (value, index, list) {
      if (predicate.call(context, value, index, list))
        results.push(value);
    });
    return results;
  };
  _.reject = function (obj, predicate, context) {
    return _.filter(obj, function (value, index, list) {
      return !predicate.call(context, value, index, list);
    }, context);
  };
  _.every = _.all = function (obj, predicate, context) {
    predicate || (predicate = _.identity);
    var result = true;
    if (obj == null)
      return result;
    if (nativeEvery && obj.every === nativeEvery)
      return obj.every(predicate, context);
    each(obj, function (value, index, list) {
      if (!(result = result && predicate.call(context, value, index, list)))
        return breaker;
    });
    return !!result;
  };
  var any = _.some = _.any = function (obj, predicate, context) {
    predicate || (predicate = _.identity);
    var result = false;
    if (obj == null)
      return result;
    if (nativeSome && obj.some === nativeSome)
      return obj.some(predicate, context);
    each(obj, function (value, index, list) {
      if (result || (result = predicate.call(context, value, index, list)))
        return breaker;
    });
    return !!result;
  };
  _.contains = _.include = function (obj, target) {
    if (obj == null)
      return false;
    if (nativeIndexOf && obj.indexOf === nativeIndexOf)
      return obj.indexOf(target) != -1;
    return any(obj, function (value) {
      return value === target;
    });
  };
  _.invoke = function (obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function (value) {
      return (isFunc ? method : value[method]).apply(value, args);
    });
  };
  _.pluck = function (obj, key) {
    return _.map(obj, _.property(key));
  };
  _.where = function (obj, attrs) {
    return _.filter(obj, _.matches(attrs));
  };
  _.findWhere = function (obj, attrs) {
    return _.find(obj, _.matches(attrs));
  };
  _.max = function (obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.max.apply(Math, obj);
    }
    var result = -Infinity, lastComputed = -Infinity;
    each(obj, function (value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      if (computed > lastComputed) {
        result = value;
        lastComputed = computed;
      }
    });
    return result;
  };
  _.min = function (obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.min.apply(Math, obj);
    }
    var result = Infinity, lastComputed = Infinity;
    each(obj, function (value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      if (computed < lastComputed) {
        result = value;
        lastComputed = computed;
      }
    });
    return result;
  };
  _.shuffle = function (obj) {
    var rand;
    var index = 0;
    var shuffled = [];
    each(obj, function (value) {
      rand = _.random(index++);
      shuffled[index - 1] = shuffled[rand];
      shuffled[rand] = value;
    });
    return shuffled;
  };
  _.sample = function (obj, n, guard) {
    if (n == null || guard) {
      if (obj.length !== +obj.length)
        obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };
  var lookupIterator = function (value) {
    if (value == null)
      return _.identity;
    if (_.isFunction(value))
      return value;
    return _.property(value);
  };
  _.sortBy = function (obj, iterator, context) {
    iterator = lookupIterator(iterator);
    return _.pluck(_.map(obj, function (value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iterator.call(context, value, index, list)
      };
    }).sort(function (left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0)
          return 1;
        if (a < b || b === void 0)
          return -1;
      }
      return left.index - right.index;
    }), "value");
  };
  var group = function (behavior) {
    return function (obj, iterator, context) {
      var result = {};
      iterator = lookupIterator(iterator);
      each(obj, function (value, index) {
        var key = iterator.call(context, value, index, obj);
        behavior(result, key, value);
      });
      return result;
    };
  };
  _.groupBy = group(function (result, key, value) {
    _.has(result, key) ? result[key].push(value) : result[key] = [value];
  });
  _.indexBy = group(function (result, key, value) {
    result[key] = value;
  });
  _.countBy = group(function (result, key) {
    _.has(result, key) ? result[key]++ : result[key] = 1;
  });
  _.sortedIndex = function (array, obj, iterator, context) {
    iterator = lookupIterator(iterator);
    var value = iterator.call(context, obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = low + high >>> 1;
      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
    }
    return low;
  };
  _.toArray = function (obj) {
    if (!obj)
      return [];
    if (_.isArray(obj))
      return slice.call(obj);
    if (obj.length === +obj.length)
      return _.map(obj, _.identity);
    return _.values(obj);
  };
  _.size = function (obj) {
    if (obj == null)
      return 0;
    return obj.length === +obj.length ? obj.length : _.keys(obj).length;
  };
  _.first = _.head = _.take = function (array, n, guard) {
    if (array == null)
      return void 0;
    if (n == null || guard)
      return array[0];
    if (n < 0)
      return [];
    return slice.call(array, 0, n);
  };
  _.initial = function (array, n, guard) {
    return slice.call(array, 0, array.length - (n == null || guard ? 1 : n));
  };
  _.last = function (array, n, guard) {
    if (array == null)
      return void 0;
    if (n == null || guard)
      return array[array.length - 1];
    return slice.call(array, Math.max(array.length - n, 0));
  };
  _.rest = _.tail = _.drop = function (array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };
  _.compact = function (array) {
    return _.filter(array, _.identity);
  };
  var flatten = function (input, shallow, output) {
    if (shallow && _.every(input, _.isArray)) {
      return concat.apply(output, input);
    }
    each(input, function (value) {
      if (_.isArray(value) || _.isArguments(value)) {
        shallow ? push.apply(output, value) : flatten(value, shallow, output);
      } else {
        output.push(value);
      }
    });
    return output;
  };
  _.flatten = function (array, shallow) {
    return flatten(array, shallow, []);
  };
  _.without = function (array) {
    return _.difference(array, slice.call(arguments, 1));
  };
  _.partition = function (array, predicate) {
    var pass = [], fail = [];
    each(array, function (elem) {
      (predicate(elem) ? pass : fail).push(elem);
    });
    return [
      pass,
      fail
    ];
  };
  _.uniq = _.unique = function (array, isSorted, iterator, context) {
    if (_.isFunction(isSorted)) {
      context = iterator;
      iterator = isSorted;
      isSorted = false;
    }
    var initial = iterator ? _.map(array, iterator, context) : array;
    var results = [];
    var seen = [];
    each(initial, function (value, index) {
      if (isSorted ? !index || seen[seen.length - 1] !== value : !_.contains(seen, value)) {
        seen.push(value);
        results.push(array[index]);
      }
    });
    return results;
  };
  _.union = function () {
    return _.uniq(_.flatten(arguments, true));
  };
  _.intersection = function (array) {
    var rest = slice.call(arguments, 1);
    return _.filter(_.uniq(array), function (item) {
      return _.every(rest, function (other) {
        return _.contains(other, item);
      });
    });
  };
  _.difference = function (array) {
    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
    return _.filter(array, function (value) {
      return !_.contains(rest, value);
    });
  };
  _.zip = function () {
    var length = _.max(_.pluck(arguments, "length").concat(0));
    var results = new Array(length);
    for (var i = 0; i < length; i++) {
      results[i] = _.pluck(arguments, "" + i);
    }
    return results;
  };
  _.object = function (list, values) {
    if (list == null)
      return {};
    var result = {};
    for (var i = 0, length = list.length; i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };
  _.indexOf = function (array, item, isSorted) {
    if (array == null)
      return -1;
    var i = 0, length = array.length;
    if (isSorted) {
      if (typeof isSorted == "number") {
        i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
      } else {
        i = _.sortedIndex(array, item);
        return array[i] === item ? i : -1;
      }
    }
    if (nativeIndexOf && array.indexOf === nativeIndexOf)
      return array.indexOf(item, isSorted);
    for (; i < length; i++)
      if (array[i] === item)
        return i;
    return -1;
  };
  _.lastIndexOf = function (array, item, from) {
    if (array == null)
      return -1;
    var hasIndex = from != null;
    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
    }
    var i = hasIndex ? from : array.length;
    while (i--)
      if (array[i] === item)
        return i;
    return -1;
  };
  _.range = function (start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = arguments[2] || 1;
    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var idx = 0;
    var range = new Array(length);
    while (idx < length) {
      range[idx++] = start;
      start += step;
    }
    return range;
  };
  var ctor = function () {
  };
  _.bind = function (func, context) {
    var args, bound;
    if (nativeBind && func.bind === nativeBind)
      return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func))
      throw new TypeError();
    args = slice.call(arguments, 2);
    return bound = function () {
      if (!(this instanceof bound))
        return func.apply(context, args.concat(slice.call(arguments)));
      ctor.prototype = func.prototype;
      var self = new ctor();
      ctor.prototype = null;
      var result = func.apply(self, args.concat(slice.call(arguments)));
      if (Object(result) === result)
        return result;
      return self;
    };
  };
  _.partial = function (func) {
    var boundArgs = slice.call(arguments, 1);
    return function () {
      var position = 0;
      var args = boundArgs.slice();
      for (var i = 0, length = args.length; i < length; i++) {
        if (args[i] === _)
          args[i] = arguments[position++];
      }
      while (position < arguments.length)
        args.push(arguments[position++]);
      return func.apply(this, args);
    };
  };
  _.bindAll = function (obj) {
    var funcs = slice.call(arguments, 1);
    if (funcs.length === 0)
      throw new Error("bindAll must be passed function names");
    each(funcs, function (f) {
      obj[f] = _.bind(obj[f], obj);
    });
    return obj;
  };
  _.memoize = function (func, hasher) {
    var memo = {};
    hasher || (hasher = _.identity);
    return function () {
      var key = hasher.apply(this, arguments);
      return _.has(memo, key) ? memo[key] : memo[key] = func.apply(this, arguments);
    };
  };
  _.delay = function (func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function () {
      return func.apply(null, args);
    }, wait);
  };
  _.defer = function (func) {
    return _.delay.apply(_, [
      func,
      1
    ].concat(slice.call(arguments, 1)));
  };
  _.throttle = function (func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    options || (options = {});
    var later = function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      context = args = null;
    };
    return function () {
      var now = _.now();
      if (!previous && options.leading === false)
        previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0) {
        clearTimeout(timeout);
        timeout = null;
        previous = now;
        result = func.apply(context, args);
        context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };
  _.debounce = function (func, wait, immediate) {
    var timeout, args, context, timestamp, result;
    var later = function () {
      var last = _.now() - timestamp;
      if (last < wait) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          context = args = null;
        }
      }
    };
    return function () {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) {
        timeout = setTimeout(later, wait);
      }
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }
      return result;
    };
  };
  _.once = function (func) {
    var ran = false, memo;
    return function () {
      if (ran)
        return memo;
      ran = true;
      memo = func.apply(this, arguments);
      func = null;
      return memo;
    };
  };
  _.wrap = function (func, wrapper) {
    return _.partial(wrapper, func);
  };
  _.compose = function () {
    var funcs = arguments;
    return function () {
      var args = arguments;
      for (var i = funcs.length - 1; i >= 0; i--) {
        args = [funcs[i].apply(this, args)];
      }
      return args[0];
    };
  };
  _.after = function (times, func) {
    return function () {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };
  _.keys = function (obj) {
    if (!_.isObject(obj))
      return [];
    if (nativeKeys)
      return nativeKeys(obj);
    var keys = [];
    for (var key in obj)
      if (_.has(obj, key))
        keys.push(key);
    return keys;
  };
  _.values = function (obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = new Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };
  _.pairs = function (obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = new Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [
        keys[i],
        obj[keys[i]]
      ];
    }
    return pairs;
  };
  _.invert = function (obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };
  _.functions = _.methods = function (obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key]))
        names.push(key);
    }
    return names.sort();
  };
  _.extend = function (obj) {
    each(slice.call(arguments, 1), function (source) {
      if (source) {
        for (var prop in source) {
          obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };
  _.pick = function (obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    each(keys, function (key) {
      if (key in obj)
        copy[key] = obj[key];
    });
    return copy;
  };
  _.omit = function (obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    for (var key in obj) {
      if (!_.contains(keys, key))
        copy[key] = obj[key];
    }
    return copy;
  };
  _.defaults = function (obj) {
    each(slice.call(arguments, 1), function (source) {
      if (source) {
        for (var prop in source) {
          if (obj[prop] === void 0)
            obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };
  _.clone = function (obj) {
    if (!_.isObject(obj))
      return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };
  _.tap = function (obj, interceptor) {
    interceptor(obj);
    return obj;
  };
  var eq = function (a, b, aStack, bStack) {
    if (a === b)
      return a !== 0 || 1 / a == 1 / b;
    if (a == null || b == null)
      return a === b;
    if (a instanceof _)
      a = a._wrapped;
    if (b instanceof _)
      b = b._wrapped;
    var className = toString.call(a);
    if (className != toString.call(b))
      return false;
    switch (className) {
    case "[object String]":
      return a == String(b);
    case "[object Number]":
      return a != +a ? b != +b : a == 0 ? 1 / a == 1 / b : a == +b;
    case "[object Date]":
    case "[object Boolean]":
      return +a == +b;
    case "[object RegExp]":
      return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase;
    }
    if (typeof a != "object" || typeof b != "object")
      return false;
    var length = aStack.length;
    while (length--) {
      if (aStack[length] == a)
        return bStack[length] == b;
    }
    var aCtor = a.constructor, bCtor = b.constructor;
    if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor) && ("constructor" in a && "constructor" in b)) {
      return false;
    }
    aStack.push(a);
    bStack.push(b);
    var size = 0, result = true;
    if (className == "[object Array]") {
      size = a.length;
      result = size == b.length;
      if (result) {
        while (size--) {
          if (!(result = eq(a[size], b[size], aStack, bStack)))
            break;
        }
      }
    } else {
      for (var key in a) {
        if (_.has(a, key)) {
          size++;
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack)))
            break;
        }
      }
      if (result) {
        for (key in b) {
          if (_.has(b, key) && !size--)
            break;
        }
        result = !size;
      }
    }
    aStack.pop();
    bStack.pop();
    return result;
  };
  _.isEqual = function (a, b) {
    return eq(a, b, [], []);
  };
  _.isEmpty = function (obj) {
    if (obj == null)
      return true;
    if (_.isArray(obj) || _.isString(obj))
      return obj.length === 0;
    for (var key in obj)
      if (_.has(obj, key))
        return false;
    return true;
  };
  _.isElement = function (obj) {
    return !!(obj && obj.nodeType === 1);
  };
  _.isArray = nativeIsArray || function (obj) {
    return toString.call(obj) == "[object Array]";
  };
  _.isObject = function (obj) {
    return obj === Object(obj);
  };
  each([
    "Arguments",
    "Function",
    "String",
    "Number",
    "Date",
    "RegExp"
  ], function (name) {
    _["is" + name] = function (obj) {
      return toString.call(obj) == "[object " + name + "]";
    };
  });
  if (!_.isArguments(arguments)) {
    _.isArguments = function (obj) {
      return !!(obj && _.has(obj, "callee"));
    };
  }
  if (typeof /./ !== "function") {
    _.isFunction = function (obj) {
      return typeof obj === "function";
    };
  }
  _.isFinite = function (obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };
  _.isNaN = function (obj) {
    return _.isNumber(obj) && obj != +obj;
  };
  _.isBoolean = function (obj) {
    return obj === true || obj === false || toString.call(obj) == "[object Boolean]";
  };
  _.isNull = function (obj) {
    return obj === null;
  };
  _.isUndefined = function (obj) {
    return obj === void 0;
  };
  _.has = function (obj, key) {
    return hasOwnProperty.call(obj, key);
  };
  _.noConflict = function () {
    root._ = previousUnderscore;
    return this;
  };
  _.identity = function (value) {
    return value;
  };
  _.constant = function (value) {
    return function () {
      return value;
    };
  };
  _.property = function (key) {
    return function (obj) {
      return obj[key];
    };
  };
  _.matches = function (attrs) {
    return function (obj) {
      if (obj === attrs)
        return true;
      for (var key in attrs) {
        if (attrs[key] !== obj[key])
          return false;
      }
      return true;
    };
  };
  _.times = function (n, iterator, context) {
    var accum = Array(Math.max(0, n));
    for (var i = 0; i < n; i++)
      accum[i] = iterator.call(context, i);
    return accum;
  };
  _.random = function (min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };
  _.now = Date.now || function () {
    return new Date().getTime();
  };
  var entityMap = {
    escape: {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      "\"": "&quot;",
      "'": "&#x27;"
    }
  };
  entityMap.unescape = _.invert(entityMap.escape);
  var entityRegexes = {
    escape: new RegExp("[" + _.keys(entityMap.escape).join("") + "]", "g"),
    unescape: new RegExp("(" + _.keys(entityMap.unescape).join("|") + ")", "g")
  };
  _.each([
    "escape",
    "unescape"
  ], function (method) {
    _[method] = function (string) {
      if (string == null)
        return "";
      return ("" + string).replace(entityRegexes[method], function (match) {
        return entityMap[method][match];
      });
    };
  });
  _.result = function (object, property) {
    if (object == null)
      return void 0;
    var value = object[property];
    return _.isFunction(value) ? value.call(object) : value;
  };
  _.mixin = function (obj) {
    each(_.functions(obj), function (name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function () {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result.call(this, func.apply(_, args));
      };
    });
  };
  var idCounter = 0;
  _.uniqueId = function (prefix) {
    var id = ++idCounter + "";
    return prefix ? prefix + id : id;
  };
  _.templateSettings = {
    evaluate: /<%([\s\S]+?)%>/g,
    interpolate: /<%=([\s\S]+?)%>/g,
    escape: /<%-([\s\S]+?)%>/g
  };
  var noMatch = /(.)^/;
  var escapes = {
    "'": "'",
    "\\": "\\",
    "\r": "r",
    "\n": "n",
    "	": "t",
    "\u2028": "u2028",
    "\u2029": "u2029"
  };
  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;
  _.template = function (text, data, settings) {
    var render;
    settings = _.defaults({}, settings, _.templateSettings);
    var matcher = new RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join("|") + "|$", "g");
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, function (match) {
        return "\\" + escapes[match];
      });
      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      }
      if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      }
      if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }
      index = offset + match.length;
      return match;
    });
    source += "';\n";
    if (!settings.variable)
      source = "with(obj||{}){\n" + source + "}\n";
    source = "var __t,__p='',__j=Array.prototype.join," + "print=function(){__p+=__j.call(arguments,'');};\n" + source + "return __p;\n";
    try {
      render = new Function(settings.variable || "obj", "_", source);
    } catch (e) {
      e.source = source;
      throw e;
    }
    if (data)
      return render(data, _);
    var template = function (data) {
      return render.call(this, data, _);
    };
    template.source = "function(" + (settings.variable || "obj") + "){\n" + source + "}";
    return template;
  };
  _.chain = function (obj) {
    return _(obj).chain();
  };
  var result = function (obj) {
    return this._chain ? _(obj).chain() : obj;
  };
  _.mixin(_);
  each([
    "pop",
    "push",
    "reverse",
    "shift",
    "sort",
    "splice",
    "unshift"
  ], function (name) {
    var method = ArrayProto[name];
    _.prototype[name] = function () {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name == "shift" || name == "splice") && obj.length === 0)
        delete obj[0];
      return result.call(this, obj);
    };
  });
  each([
    "concat",
    "join",
    "slice"
  ], function (name) {
    var method = ArrayProto[name];
    _.prototype[name] = function () {
      return result.call(this, method.apply(this._wrapped, arguments));
    };
  });
  _.extend(_.prototype, {
    chain: function () {
      this._chain = true;
      return this;
    },
    value: function () {
      return this._wrapped;
    }
  });
  if (typeof define === "function" && define.amd) {
    define("underscore", [], function () {
      return _;
    });
  }
  return _;


}).call(this, require, exports, module);
var __old___0 = window['_'],
    __old___ibm1 = window['_IBM'];
window['_'] = __umodule__;
window['_IBM'] = __umodule__;

__umodule__.noConflict = function () {
  window['_'] = __old___0;
window['_IBM'] = __old___ibm1;
return __umodule__;
};
return __umodule__;
});
/* istanbul ignore next */
define('ibm/mobile/lib/IBMQ', ['require','exports','module'],function (require, exports, module) {
  var __umodule__ = (function (require, exports, module) {
  

"use strict";
  var hasStacks = false;
  try {
    throw new Error();
  } catch (e) {
    hasStacks = !!e.stack;
  }
  var qStartingLine = captureLine();
  var qFileName;
  var noop = function () {
  };
  var nextTick = function () {
    var head = {
      task: void 0,
      next: null
    };
    var tail = head;
    var flushing = false;
    var requestTick = void 0;
    var isNodeJS = false;
    function flush() {
      while (head.next) {
        head = head.next;
        var task = head.task;
        head.task = void 0;
        var domain = head.domain;
        if (domain) {
          head.domain = void 0;
          domain.enter();
        }
        try {
          task();
        } catch (e) {
          if (isNodeJS) {
            if (domain) {
              domain.exit();
            }
            setTimeout(flush, 0);
            if (domain) {
              domain.enter();
            }
            throw e;
          } else {
            setTimeout(function () {
              throw e;
            }, 0);
          }
        }
        if (domain) {
          domain.exit();
        }
      }
      flushing = false;
    }
    nextTick = function (task) {
      tail = tail.next = {
        task: task,
        domain: isNodeJS && process.domain,
        next: null
      };
      if (!flushing) {
        flushing = true;
        requestTick();
      }
    };
    if (typeof process !== "undefined" && process.nextTick) {
      isNodeJS = true;
      requestTick = function () {
        process.nextTick(flush);
      };
    } else if (typeof setImmediate === "function") {
      if (typeof window !== "undefined") {
        requestTick = setImmediate.bind(window, flush);
      } else {
        requestTick = function () {
          setImmediate(flush);
        };
      }
    } else if (typeof MessageChannel !== "undefined") {
      var channel = new MessageChannel();
      channel.port1.onmessage = function () {
        requestTick = requestPortTick;
        channel.port1.onmessage = flush;
        flush();
      };
      var requestPortTick = function () {
        channel.port2.postMessage(0);
      };
      requestTick = function () {
        setTimeout(flush, 0);
        requestPortTick();
      };
    } else {
      requestTick = function () {
        setTimeout(flush, 0);
      };
    }
    return nextTick;
  }();
  var call = Function.call;
  function uncurryThis(f) {
    return function () {
      return call.apply(f, arguments);
    };
  }
  var array_slice = uncurryThis(Array.prototype.slice);
  var array_reduce = uncurryThis(Array.prototype.reduce || function (callback, basis) {
    var index = 0, length = this.length;
    if (arguments.length === 1) {
      do {
        if (index in this) {
          basis = this[index++];
          break;
        }
        if (++index >= length) {
          throw new TypeError();
        }
      } while (1);
    }
    for (; index < length; index++) {
      if (index in this) {
        basis = callback(basis, this[index], index);
      }
    }
    return basis;
  });
  var array_indexOf = uncurryThis(Array.prototype.indexOf || function (value) {
    for (var i = 0; i < this.length; i++) {
      if (this[i] === value) {
        return i;
      }
    }
    return -1;
  });
  var array_map = uncurryThis(Array.prototype.map || function (callback, thisp) {
    var self = this;
    var collect = [];
    array_reduce(self, function (undefined, value, index) {
      collect.push(callback.call(thisp, value, index, self));
    }, void 0);
    return collect;
  });
  var object_create = Object.create || function (prototype) {
    function Type() {
    }
    Type.prototype = prototype;
    return new Type();
  };
  var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
  var object_keys = Object.keys || function (object) {
    var keys = [];
    for (var key in object) {
      if (object_hasOwnProperty(object, key)) {
        keys.push(key);
      }
    }
    return keys;
  };
  var object_toString = uncurryThis(Object.prototype.toString);
  function isObject(value) {
    return value === Object(value);
  }
  function isStopIteration(exception) {
    return object_toString(exception) === "[object StopIteration]" || exception instanceof QReturnValue;
  }
  var QReturnValue;
  if (typeof ReturnValue !== "undefined") {
    QReturnValue = ReturnValue;
  } else {
    QReturnValue = function (value) {
      this.value = value;
    };
  }
  var hasES6Generators;
  try {
    new Function("(function* (){ yield 1; })");
    hasES6Generators = true;
  } catch (e) {
    hasES6Generators = false;
  }
  var STACK_JUMP_SEPARATOR = "From previous event:";
  function makeStackTraceLong(error, promise) {
    if (hasStacks && promise.stack && typeof error === "object" && error !== null && error.stack && error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1) {
      var stacks = [];
      for (var p = promise; !!p; p = p.source) {
        if (p.stack) {
          stacks.unshift(p.stack);
        }
      }
      stacks.unshift(error.stack);
      var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
      error.stack = filterStackString(concatedStacks);
    }
  }
  function filterStackString(stackString) {
    var lines = stackString.split("\n");
    var desiredLines = [];
    for (var i = 0; i < lines.length; ++i) {
      var line = lines[i];
      if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
        desiredLines.push(line);
      }
    }
    return desiredLines.join("\n");
  }
  function isNodeFrame(stackLine) {
    return stackLine.indexOf("(module.js:") !== -1 || stackLine.indexOf("(node.js:") !== -1;
  }
  function getFileNameAndLineNumber(stackLine) {
    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
    if (attempt1) {
      return [
        attempt1[1],
        Number(attempt1[2])
      ];
    }
    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
    if (attempt2) {
      return [
        attempt2[1],
        Number(attempt2[2])
      ];
    }
    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
    if (attempt3) {
      return [
        attempt3[1],
        Number(attempt3[2])
      ];
    }
  }
  function isInternalFrame(stackLine) {
    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);
    if (!fileNameAndLineNumber) {
      return false;
    }
    var fileName = fileNameAndLineNumber[0];
    var lineNumber = fileNameAndLineNumber[1];
    return fileName === qFileName && lineNumber >= qStartingLine && lineNumber <= qEndingLine;
  }
  function captureLine() {
    if (!hasStacks) {
      return;
    }
    try {
      throw new Error();
    } catch (e) {
      var lines = e.stack.split("\n");
      var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
      var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
      if (!fileNameAndLineNumber) {
        return;
      }
      qFileName = fileNameAndLineNumber[0];
      return fileNameAndLineNumber[1];
    }
  }
  function deprecate(callback, name, alternative) {
    return function () {
      if (typeof console !== "undefined" && typeof console.warn === "function") {
        console.warn(name + " is deprecated, use " + alternative + " instead.", new Error("").stack);
      }
      return callback.apply(callback, arguments);
    };
  }
  function Q(value) {
    if (isPromise(value)) {
      return value;
    }
    if (isPromiseAlike(value)) {
      return coerce(value);
    } else {
      return fulfill(value);
    }
  }
  Q.resolve = Q;
  Q.nextTick = nextTick;
  Q.longStackSupport = false;
  Q.defer = defer;
  function defer() {
    var messages = [], progressListeners = [], resolvedPromise;
    var deferred = object_create(defer.prototype);
    var promise = object_create(Promise.prototype);
    promise.promiseDispatch = function (resolve, op, operands) {
      var args = array_slice(arguments);
      if (messages) {
        messages.push(args);
        if (op === "when" && operands[1]) {
          progressListeners.push(operands[1]);
        }
      } else {
        nextTick(function () {
          resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
        });
      }
    };
    promise.valueOf = deprecate(function () {
      if (messages) {
        return promise;
      }
      var nearerValue = nearer(resolvedPromise);
      if (isPromise(nearerValue)) {
        resolvedPromise = nearerValue;
      }
      return nearerValue;
    }, "valueOf", "inspect");
    promise.inspect = function () {
      if (!resolvedPromise) {
        return { state: "pending" };
      }
      return resolvedPromise.inspect();
    };
    if (Q.longStackSupport && hasStacks) {
      try {
        throw new Error();
      } catch (e) {
        promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
      }
    }
    function become(newPromise) {
      resolvedPromise = newPromise;
      promise.source = newPromise;
      array_reduce(messages, function (undefined, message) {
        nextTick(function () {
          newPromise.promiseDispatch.apply(newPromise, message);
        });
      }, void 0);
      messages = void 0;
      progressListeners = void 0;
    }
    deferred.promise = promise;
    deferred.resolve = function (value) {
      if (resolvedPromise) {
        return;
      }
      become(Q(value));
    };
    deferred.fulfill = function (value) {
      if (resolvedPromise) {
        return;
      }
      become(fulfill(value));
    };
    deferred.reject = function (reason) {
      if (resolvedPromise) {
        return;
      }
      become(reject(reason));
    };
    deferred.notify = function (progress) {
      if (resolvedPromise) {
        return;
      }
      array_reduce(progressListeners, function (undefined, progressListener) {
        nextTick(function () {
          progressListener(progress);
        });
      }, void 0);
    };
    return deferred;
  }
  defer.prototype.makeNodeResolver = function () {
    var self = this;
    return function (error, value) {
      if (error) {
        self.reject(error);
      } else if (arguments.length > 2) {
        self.resolve(array_slice(arguments, 1));
      } else {
        self.resolve(value);
      }
    };
  };
  Q.promise = promise;
  function promise(resolver) {
    if (typeof resolver !== "function") {
      throw new TypeError("resolver must be a function.");
    }
    var deferred = defer();
    try {
      resolver(deferred.resolve, deferred.reject, deferred.notify);
    } catch (reason) {
      deferred.reject(reason);
    }
    return deferred.promise;
  }
  Q.passByCopy = function (object) {
    return object;
  };
  Promise.prototype.passByCopy = function () {
    return this;
  };
  Q.join = function (x, y) {
    return Q(x).join(y);
  };
  Promise.prototype.join = function (that) {
    return Q([
      this,
      that
    ]).spread(function (x, y) {
      if (x === y) {
        return x;
      } else {
        throw new Error("Can't join: not the same: " + x + " " + y);
      }
    });
  };
  Q.race = race;
  function race(answerPs) {
    return promise(function (resolve, reject) {
      for (var i = 0, len = answerPs.length; i < len; i++) {
        Q(answerPs[i]).then(resolve, reject);
      }
    });
  }
  Promise.prototype.race = function () {
    return this.then(Q.race);
  };
  Q.makePromise = Promise;
  function Promise(descriptor, fallback, inspect) {
    if (fallback === void 0) {
      fallback = function (op) {
        return reject(new Error("Promise does not support operation: " + op));
      };
    }
    if (inspect === void 0) {
      inspect = function () {
        return { state: "unknown" };
      };
    }
    var promise = object_create(Promise.prototype);
    promise.promiseDispatch = function (resolve, op, args) {
      var result;
      try {
        if (descriptor[op]) {
          result = descriptor[op].apply(promise, args);
        } else {
          result = fallback.call(promise, op, args);
        }
      } catch (exception) {
        result = reject(exception);
      }
      if (resolve) {
        resolve(result);
      }
    };
    promise.inspect = inspect;
    if (inspect) {
      var inspected = inspect();
      if (inspected.state === "rejected") {
        promise.exception = inspected.reason;
      }
      promise.valueOf = deprecate(function () {
        var inspected = inspect();
        if (inspected.state === "pending" || inspected.state === "rejected") {
          return promise;
        }
        return inspected.value;
      });
    }
    return promise;
  }
  Promise.prototype.toString = function () {
    return "[object Promise]";
  };
  Promise.prototype.then = function (fulfilled, rejected, progressed) {
    var self = this;
    var deferred = defer();
    var done = false;
    function _fulfilled(value) {
      try {
        return typeof fulfilled === "function" ? fulfilled(value) : value;
      } catch (exception) {
        return reject(exception);
      }
    }
    function _rejected(exception) {
      if (typeof rejected === "function") {
        makeStackTraceLong(exception, self);
        try {
          return rejected(exception);
        } catch (newException) {
          return reject(newException);
        }
      }
      return reject(exception);
    }
    function _progressed(value) {
      return typeof progressed === "function" ? progressed(value) : value;
    }
    nextTick(function () {
      self.promiseDispatch(function (value) {
        if (done) {
          return;
        }
        done = true;
        deferred.resolve(_fulfilled(value));
      }, "when", [function (exception) {
          if (done) {
            return;
          }
          done = true;
          deferred.resolve(_rejected(exception));
        }]);
    });
    self.promiseDispatch(void 0, "when", [
      void 0,
      function (value) {
        var newValue;
        var threw = false;
        try {
          newValue = _progressed(value);
        } catch (e) {
          threw = true;
          if (Q.onerror) {
            Q.onerror(e);
          } else {
            throw e;
          }
        }
        if (!threw) {
          deferred.notify(newValue);
        }
      }
    ]);
    return deferred.promise;
  };
  Q.when = when;
  function when(value, fulfilled, rejected, progressed) {
    return Q(value).then(fulfilled, rejected, progressed);
  }
  Promise.prototype.thenResolve = function (value) {
    return this.then(function () {
      return value;
    });
  };
  Q.thenResolve = function (promise, value) {
    return Q(promise).thenResolve(value);
  };
  Promise.prototype.thenReject = function (reason) {
    return this.then(function () {
      throw reason;
    });
  };
  Q.thenReject = function (promise, reason) {
    return Q(promise).thenReject(reason);
  };
  Q.nearer = nearer;
  function nearer(value) {
    if (isPromise(value)) {
      var inspected = value.inspect();
      if (inspected.state === "fulfilled") {
        return inspected.value;
      }
    }
    return value;
  }
  Q.isPromise = isPromise;
  function isPromise(object) {
    return isObject(object) && typeof object.promiseDispatch === "function" && typeof object.inspect === "function";
  }
  Q.isPromiseAlike = isPromiseAlike;
  function isPromiseAlike(object) {
    return isObject(object) && typeof object.then === "function";
  }
  Q.isPending = isPending;
  function isPending(object) {
    return isPromise(object) && object.inspect().state === "pending";
  }
  Promise.prototype.isPending = function () {
    return this.inspect().state === "pending";
  };
  Q.isFulfilled = isFulfilled;
  function isFulfilled(object) {
    return !isPromise(object) || object.inspect().state === "fulfilled";
  }
  Promise.prototype.isFulfilled = function () {
    return this.inspect().state === "fulfilled";
  };
  Q.isRejected = isRejected;
  function isRejected(object) {
    return isPromise(object) && object.inspect().state === "rejected";
  }
  Promise.prototype.isRejected = function () {
    return this.inspect().state === "rejected";
  };
  var unhandledReasons = [];
  var unhandledRejections = [];
  var unhandledReasonsDisplayed = false;
  var trackUnhandledRejections = true;
  function displayUnhandledReasons() {
    if (!unhandledReasonsDisplayed && typeof window !== "undefined" && !window.Touch && window.console) {
      console.warn("[Q] Unhandled rejection reasons (should be empty):", unhandledReasons);
    }
    unhandledReasonsDisplayed = true;
  }
  function logUnhandledReasons() {
    for (var i = 0; i < unhandledReasons.length; i++) {
      var reason = unhandledReasons[i];
      console.warn("Unhandled rejection reason:", reason);
    }
  }
  function resetUnhandledRejections() {
    unhandledReasons.length = 0;
    unhandledRejections.length = 0;
    unhandledReasonsDisplayed = false;
    if (!trackUnhandledRejections) {
      trackUnhandledRejections = true;
      if (typeof process !== "undefined" && process.on) {
        process.on("exit", logUnhandledReasons);
      }
    }
  }
  function trackRejection(promise, reason) {
    if (!trackUnhandledRejections) {
      return;
    }
    unhandledRejections.push(promise);
    if (reason && typeof reason.stack !== "undefined") {
      unhandledReasons.push(reason.stack);
    } else {
      unhandledReasons.push("(no stack) " + reason);
    }
    displayUnhandledReasons();
  }
  function untrackRejection(promise) {
    if (!trackUnhandledRejections) {
      return;
    }
    var at = array_indexOf(unhandledRejections, promise);
    if (at !== -1) {
      unhandledRejections.splice(at, 1);
      unhandledReasons.splice(at, 1);
    }
  }
  Q.resetUnhandledRejections = resetUnhandledRejections;
  Q.getUnhandledReasons = function () {
    return unhandledReasons.slice();
  };
  Q.stopUnhandledRejectionTracking = function () {
    resetUnhandledRejections();
    if (typeof process !== "undefined" && process.on) {
      process.removeListener("exit", logUnhandledReasons);
    }
    trackUnhandledRejections = false;
  };
  resetUnhandledRejections();
  Q.reject = reject;
  function reject(reason) {
    var rejection = Promise({
      "when": function (rejected) {
        if (rejected) {
          untrackRejection(this);
        }
        return rejected ? rejected(reason) : this;
      }
    }, function fallback() {
      return this;
    }, function inspect() {
      return {
        state: "rejected",
        reason: reason
      };
    });
    trackRejection(rejection, reason);
    return rejection;
  }
  Q.fulfill = fulfill;
  function fulfill(value) {
    return Promise({
      "when": function () {
        return value;
      },
      "get": function (name) {
        return value[name];
      },
      "set": function (name, rhs) {
        value[name] = rhs;
      },
      "delete": function (name) {
        delete value[name];
      },
      "post": function (name, args) {
        if (name === null || name === void 0) {
          return value.apply(void 0, args);
        } else {
          return value[name].apply(value, args);
        }
      },
      "apply": function (thisp, args) {
        return value.apply(thisp, args);
      },
      "keys": function () {
        return object_keys(value);
      }
    }, void 0, function inspect() {
      return {
        state: "fulfilled",
        value: value
      };
    });
  }
  function coerce(promise) {
    var deferred = defer();
    nextTick(function () {
      try {
        promise.then(deferred.resolve, deferred.reject, deferred.notify);
      } catch (exception) {
        deferred.reject(exception);
      }
    });
    return deferred.promise;
  }
  Q.master = master;
  function master(object) {
    return Promise({
      "isDef": function () {
      }
    }, function fallback(op, args) {
      return dispatch(object, op, args);
    }, function () {
      return Q(object).inspect();
    });
  }
  Q.spread = spread;
  function spread(value, fulfilled, rejected) {
    return Q(value).spread(fulfilled, rejected);
  }
  Promise.prototype.spread = function (fulfilled, rejected) {
    return this.all().then(function (array) {
      return fulfilled.apply(void 0, array);
    }, rejected);
  };
  Q.async = async;
  function async(makeGenerator) {
    return function () {
      function continuer(verb, arg) {
        var result;
        if (hasES6Generators) {
          try {
            result = generator[verb](arg);
          } catch (exception) {
            return reject(exception);
          }
          if (result.done) {
            return result.value;
          } else {
            return when(result.value, callback, errback);
          }
        } else {
          try {
            result = generator[verb](arg);
          } catch (exception) {
            if (isStopIteration(exception)) {
              return exception.value;
            } else {
              return reject(exception);
            }
          }
          return when(result, callback, errback);
        }
      }
      var generator = makeGenerator.apply(this, arguments);
      var callback = continuer.bind(continuer, "next");
      var errback = continuer.bind(continuer, "throw");
      return callback();
    };
  }
  Q.spawn = spawn;
  function spawn(makeGenerator) {
    Q.done(Q.async(makeGenerator)());
  }
  Q["return"] = _return;
  function _return(value) {
    throw new QReturnValue(value);
  }
  Q.promised = promised;
  function promised(callback) {
    return function () {
      return spread([
        this,
        all(arguments)
      ], function (self, args) {
        return callback.apply(self, args);
      });
    };
  }
  Q.dispatch = dispatch;
  function dispatch(object, op, args) {
    return Q(object).dispatch(op, args);
  }
  Promise.prototype.dispatch = function (op, args) {
    var self = this;
    var deferred = defer();
    nextTick(function () {
      self.promiseDispatch(deferred.resolve, op, args);
    });
    return deferred.promise;
  };
  Q.get = function (object, key) {
    return Q(object).dispatch("get", [key]);
  };
  Promise.prototype.get = function (key) {
    return this.dispatch("get", [key]);
  };
  Q.set = function (object, key, value) {
    return Q(object).dispatch("set", [
      key,
      value
    ]);
  };
  Promise.prototype.set = function (key, value) {
    return this.dispatch("set", [
      key,
      value
    ]);
  };
  Q.del = Q["delete"] = function (object, key) {
    return Q(object).dispatch("delete", [key]);
  };
  Promise.prototype.del = Promise.prototype["delete"] = function (key) {
    return this.dispatch("delete", [key]);
  };
  Q.mapply = Q.post = function (object, name, args) {
    return Q(object).dispatch("post", [
      name,
      args
    ]);
  };
  Promise.prototype.mapply = Promise.prototype.post = function (name, args) {
    return this.dispatch("post", [
      name,
      args
    ]);
  };
  Q.send = Q.mcall = Q.invoke = function (object, name) {
    return Q(object).dispatch("post", [
      name,
      array_slice(arguments, 2)
    ]);
  };
  Promise.prototype.send = Promise.prototype.mcall = Promise.prototype.invoke = function (name) {
    return this.dispatch("post", [
      name,
      array_slice(arguments, 1)
    ]);
  };
  Q.fapply = function (object, args) {
    return Q(object).dispatch("apply", [
      void 0,
      args
    ]);
  };
  Promise.prototype.fapply = function (args) {
    return this.dispatch("apply", [
      void 0,
      args
    ]);
  };
  Q["try"] = Q.fcall = function (object) {
    return Q(object).dispatch("apply", [
      void 0,
      array_slice(arguments, 1)
    ]);
  };
  Promise.prototype.fcall = function () {
    return this.dispatch("apply", [
      void 0,
      array_slice(arguments)
    ]);
  };
  Q.fbind = function (object) {
    var promise = Q(object);
    var args = array_slice(arguments, 1);
    return function fbound() {
      return promise.dispatch("apply", [
        this,
        args.concat(array_slice(arguments))
      ]);
    };
  };
  Promise.prototype.fbind = function () {
    var promise = this;
    var args = array_slice(arguments);
    return function fbound() {
      return promise.dispatch("apply", [
        this,
        args.concat(array_slice(arguments))
      ]);
    };
  };
  Q.keys = function (object) {
    return Q(object).dispatch("keys", []);
  };
  Promise.prototype.keys = function () {
    return this.dispatch("keys", []);
  };
  Q.all = all;
  function all(promises) {
    return when(promises, function (promises) {
      var countDown = 0;
      var deferred = defer();
      array_reduce(promises, function (undefined, promise, index) {
        var snapshot;
        if (isPromise(promise) && (snapshot = promise.inspect()).state === "fulfilled") {
          promises[index] = snapshot.value;
        } else {
          ++countDown;
          when(promise, function (value) {
            promises[index] = value;
            if (--countDown === 0) {
              deferred.resolve(promises);
            }
          }, deferred.reject, function (progress) {
            deferred.notify({
              index: index,
              value: progress
            });
          });
        }
      }, void 0);
      if (countDown === 0) {
        deferred.resolve(promises);
      }
      return deferred.promise;
    });
  }
  Promise.prototype.all = function () {
    return all(this);
  };
  Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
  function allResolved(promises) {
    return when(promises, function (promises) {
      promises = array_map(promises, Q);
      return when(all(array_map(promises, function (promise) {
        return when(promise, noop, noop);
      })), function () {
        return promises;
      });
    });
  }
  Promise.prototype.allResolved = function () {
    return allResolved(this);
  };
  Q.allSettled = allSettled;
  function allSettled(promises) {
    return Q(promises).allSettled();
  }
  Promise.prototype.allSettled = function () {
    return this.then(function (promises) {
      return all(array_map(promises, function (promise) {
        promise = Q(promise);
        function regardless() {
          return promise.inspect();
        }
        return promise.then(regardless, regardless);
      }));
    });
  };
  Q.fail = Q["catch"] = function (object, rejected) {
    return Q(object).then(void 0, rejected);
  };
  Promise.prototype.fail = Promise.prototype["catch"] = function (rejected) {
    return this.then(void 0, rejected);
  };
  Q.progress = progress;
  function progress(object, progressed) {
    return Q(object).then(void 0, void 0, progressed);
  }
  Promise.prototype.progress = function (progressed) {
    return this.then(void 0, void 0, progressed);
  };
  Q.fin = Q["finally"] = function (object, callback) {
    return Q(object)["finally"](callback);
  };
  Promise.prototype.fin = Promise.prototype["finally"] = function (callback) {
    callback = Q(callback);
    return this.then(function (value) {
      return callback.fcall().then(function () {
        return value;
      });
    }, function (reason) {
      return callback.fcall().then(function () {
        throw reason;
      });
    });
  };
  Q.done = function (object, fulfilled, rejected, progress) {
    return Q(object).done(fulfilled, rejected, progress);
  };
  Promise.prototype.done = function (fulfilled, rejected, progress) {
    var onUnhandledError = function (error) {
      nextTick(function () {
        makeStackTraceLong(error, promise);
        if (Q.onerror) {
          Q.onerror(error);
        } else {
          throw error;
        }
      });
    };
    var promise = fulfilled || rejected || progress ? this.then(fulfilled, rejected, progress) : this;
    if (typeof process === "object" && process && process.domain) {
      onUnhandledError = process.domain.bind(onUnhandledError);
    }
    promise.then(void 0, onUnhandledError);
  };
  Q.timeout = function (object, ms, message) {
    return Q(object).timeout(ms, message);
  };
  Promise.prototype.timeout = function (ms, message) {
    var deferred = defer();
    var timeoutId = setTimeout(function () {
      deferred.reject(new Error(message || "Timed out after " + ms + " ms"));
    }, ms);
    this.then(function (value) {
      clearTimeout(timeoutId);
      deferred.resolve(value);
    }, function (exception) {
      clearTimeout(timeoutId);
      deferred.reject(exception);
    }, deferred.notify);
    return deferred.promise;
  };
  Q.delay = function (object, timeout) {
    if (timeout === void 0) {
      timeout = object;
      object = void 0;
    }
    return Q(object).delay(timeout);
  };
  Promise.prototype.delay = function (timeout) {
    return this.then(function (value) {
      var deferred = defer();
      setTimeout(function () {
        deferred.resolve(value);
      }, timeout);
      return deferred.promise;
    });
  };
  Q.nfapply = function (callback, args) {
    return Q(callback).nfapply(args);
  };
  Promise.prototype.nfapply = function (args) {
    var deferred = defer();
    var nodeArgs = array_slice(args);
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
  };
  Q.nfcall = function (callback) {
    var args = array_slice(arguments, 1);
    return Q(callback).nfapply(args);
  };
  Promise.prototype.nfcall = function () {
    var nodeArgs = array_slice(arguments);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
  };
  Q.nfbind = Q.denodeify = function (callback) {
    var baseArgs = array_slice(arguments, 1);
    return function () {
      var nodeArgs = baseArgs.concat(array_slice(arguments));
      var deferred = defer();
      nodeArgs.push(deferred.makeNodeResolver());
      Q(callback).fapply(nodeArgs).fail(deferred.reject);
      return deferred.promise;
    };
  };
  Promise.prototype.nfbind = Promise.prototype.denodeify = function () {
    var args = array_slice(arguments);
    args.unshift(this);
    return Q.denodeify.apply(void 0, args);
  };
  Q.nbind = function (callback, thisp) {
    var baseArgs = array_slice(arguments, 2);
    return function () {
      var nodeArgs = baseArgs.concat(array_slice(arguments));
      var deferred = defer();
      nodeArgs.push(deferred.makeNodeResolver());
      function bound() {
        return callback.apply(thisp, arguments);
      }
      Q(bound).fapply(nodeArgs).fail(deferred.reject);
      return deferred.promise;
    };
  };
  Promise.prototype.nbind = function () {
    var args = array_slice(arguments, 0);
    args.unshift(this);
    return Q.nbind.apply(void 0, args);
  };
  Q.nmapply = Q.npost = function (object, name, args) {
    return Q(object).npost(name, args);
  };
  Promise.prototype.nmapply = Promise.prototype.npost = function (name, args) {
    var nodeArgs = array_slice(args || []);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [
      name,
      nodeArgs
    ]).fail(deferred.reject);
    return deferred.promise;
  };
  Q.nsend = Q.nmcall = Q.ninvoke = function (object, name) {
    var nodeArgs = array_slice(arguments, 2);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    Q(object).dispatch("post", [
      name,
      nodeArgs
    ]).fail(deferred.reject);
    return deferred.promise;
  };
  Promise.prototype.nsend = Promise.prototype.nmcall = Promise.prototype.ninvoke = function (name) {
    var nodeArgs = array_slice(arguments, 1);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [
      name,
      nodeArgs
    ]).fail(deferred.reject);
    return deferred.promise;
  };
  Q.nodeify = nodeify;
  function nodeify(object, nodeback) {
    return Q(object).nodeify(nodeback);
  }
  Promise.prototype.nodeify = function (nodeback) {
    if (nodeback) {
      this.then(function (value) {
        nextTick(function () {
          nodeback(null, value);
        });
      }, function (error) {
        nextTick(function () {
          nodeback(error);
        });
      });
    } else {
      return this;
    }
  };
  var qEndingLine = captureLine();
  return Q;


}).call(this, require, exports, module);
var __old__q0 = window['Q'],
    __old___q1 = window['_Q'];
window['Q'] = __umodule__;
window['_Q'] = __umodule__;

__umodule__.noConflict = function () {
  window['Q'] = __old__q0;
window['_Q'] = __old___q1;
return __umodule__;
};
return __umodule__;
});
define('ibm/mobile/utils/IBMUtils', ['require', 'exports', 'module', '../lib/IBMUnderscore'], function (require, exports, module, _) {
  var __umodule__ = (function (require, exports, module, _) {
  

function generateUUID() {
    var format = [
        8,
        4,
        4,
        4,
        8,
        4
      ], uuid;
    format = format.map(function (digits) {
      var rand = Math.floor(Math.random() * Math.pow(16, digits));
      return rand.toString(16);
    });
    format[2] = "4" + format[2].substr(1);
    format[3] = (parseInt(format[3][0], 16) & 3 | 8).toString(16) + format[3].substr(1);
    uuid = format.join("-");
    return uuid.substr(0, uuid.lastIndexOf("-")) + uuid.substr(uuid.lastIndexOf("-") + 1);
  }
  function replace(str, replaceStrings) {
    var newStr = str;
    str.match(/\$(\w)+/gi).forEach(function (replaceStr) {
      var idx = replaceStr.replace("$", "");
      newStr = newStr.replace(replaceStr, replaceStrings[idx]);
    });
    return newStr;
  }
  function isNode() {
    var cordova = cordova, hasExports = typeof __isNode === "boolean" ? __isNode : typeof exports === "object";
    return hasExports && !cordova;
  }
  function toQueryString(obj) {
    var str = "";
    for (prop in obj) {
      var val = obj[prop];
      if (!_.isUndefined(val) && !_.isNull(val)) {
        str = str + prop + "=" + val + "&";
      }
    }
    return str.substring(0, str.length - 1);
  }
  function hasFields(obj, fields) {
    if (!_.isObject(obj))
      return false;
    if (!_.isArray(fields))
      fields = [fields];
    return fields.every(function (field) {
      var val = obj[field];
      if (_.isNull(val) || _.isUndefined(val)) {
        console.warn("Object %o is missing field: %s", obj, field);
        return false;
      }
      return true;
    });
  }
  function inherit(parent, ctor, properties) {
    var props = properties || {};
    if (!_.isFunction(ctor)) {
      props = ctor;
      ctor = props.constructor;
      delete props.constructor;
    }
    ctor.prototype = Object.create(parent.prototype);
    Object.defineProperty(ctor.prototype, "constructor", {
      enumerable: false,
      value: ctor
    });
    _.extend(ctor.prototype, props);
    return ctor;
  }
  function formatObject(object) {
    var doFormat = function (indent, outputMessage, value) {
      if (value == null) {
        return "\"null\"";
      }
      if (typeof value == "string") {
        return "\"" + value + "\"";
      }
      if (typeof value == "function") {
        return "";
      } else if (typeof value == "number" || value instanceof Date) {
        return value;
      } else if (value instanceof Array) {
        var msg = outputMessage + "[";
        var index = 0;
        value.forEach(function (item) {
          if (index++) {
            msg += ",";
          }
          msg += doFormat(indent, "", item);
        });
        msg += "]";
        return msg;
      } else {
        if (value["__IBMUTIL_PROCESSED__"]) {
          return "\"[Circular]\"";
        } else {
          value["__IBMUTIL_PROCESSED__"] = true;
        }
        var prefix = "{";
        var suffix = "\n" + indent + "}";
        var msg = outputMessage + prefix;
        var index = 0;
        var keySize = 0;
        indent += "  ";
        for (var key in value) {
          keySize++;
          if (typeof value[key] != "function" && key != "__IBMUTIL_PROCESSED__") {
            if (index++) {
              msg += ",";
            }
            msg += "\n" + indent + "\"" + key + "\": ";
            msg += doFormat(indent, "", value[key]);
          }
        }
        msg += keySize > 0 ? suffix : "}";
        value["__IBMUTIL_PROCESSED__"] = undefined;
        return msg;
      }
    };
    return doFormat("", "", object);
  }
  function getStackInfo() {
    var result = "";
    try {
      var current, currentFile;
      var err = new Error();
      Error.prepareStackTrace = function (err, stack) {
        return stack;
      };
      current = err.stack.shift();
      currentFile = current.getFileName();
      while (err.stack[0].getFileName() == currentFile) {
        err.stack.shift();
      }
      for (var i = 0; i < err.stack.length; i++) {
        var funcName = err.stack[i].getFunctionName() == null ? "Object.<anonymous>" : err.stack[i].getFunctionName();
        result += "\n   at " + funcName + " (" + err.stack[i].getFileName() + ":" + err.stack[i].getLineNumber() + ":" + err.stack[i].getColumnNumber() + ")";
      }
      return result;
    } catch (err) {
    }
    return result;
  }
  return {
    replace: replace,
    generateUUID: generateUUID,
    isNode: isNode,
    inherit: inherit,
    hasFields: hasFields,
    toQueryString: toQueryString,
    formatObject: formatObject,
    getStackInfo: getStackInfo
  };


}).call(this, require, exports, module, _);
var __old__ibmutils0 = window['IBMUtils'];
window['IBMUtils'] = __umodule__;

__umodule__.noConflict = function () {
  window['IBMUtils'] = __old__ibmutils0;
return __umodule__;
};
return __umodule__;
});
define('ibm/mobile/utils/logger/IBMLoggerLevel', ['require','exports','module'],function (require, exports, module) {
  

var _IBMLoggerLevel = function (weight, name) {
    this.weight = weight;
    this.name = name;
  };
  var levels = new Array(new _IBMLoggerLevel(1000, "ERROR"), new _IBMLoggerLevel(900, "WARN"), new _IBMLoggerLevel(800, "INFO"), new _IBMLoggerLevel(700, "DEBUG"), new _IBMLoggerLevel(600, "VERBOSE"));
  var IBMLoggerLevel = {
    levels: levels,
    getLevel: function (level) {
      var levelName = null;
      if (level && typeof level == "string") {
        levelName = level;
      } else if (typeof level == "object") {
        levelName = level.name;
      }
      return this[levelName.toUpperCase()];
    }
  };
  for (var i = 0; i < levels.length; i++) {
    IBMLoggerLevel[levels[i].name] = levels[i];
  }
  return IBMLoggerLevel;


});
define('ibm/mobile/utils/logger/adapters/IBMDefaultAdapter', ['require', 'exports', 'module', '../../IBMUtils'], function (require, exports, module, utils) {
  

var isNode = utils.isNode();
  var IBMDefaultAdapter = function () {
  };
  IBMDefaultAdapter.prototype.log = function (level, msg) {
    var logMsg = "[" + level + "] " + (msg && msg.toString().trim().length > 0 ? msg : "");
    if (level.toUpperCase() == "VERBOSE") {
      console.log(logMsg);
    } else {
      var consoleMethod = level.toLowerCase();
      if (isNode && "DEBUG" == level.toUpperCase()) {
        consoleMethod = "error";
      }
      console[consoleMethod](logMsg);
    }
  };
  IBMDefaultAdapter.prototype.setLevel = function (level) {
    this.level = level;
  };
  IBMDefaultAdapter.prototype.getLevel = function () {
    return this.level;
  };
  return IBMDefaultAdapter;


});
define('ibm/mobile/utils/logger/adapters/IBMWinstonAdapter', ['require','exports','module'],function (require, exports, module) {
  

var IBMWinstonAdapter = function (object) {
    var winston = __nodeRequire("winston");
    var config = {
      transports: [],
      exceptionHandlers: [],
      levels: {
        verbose: 500,
        debug: 600,
        info: 700,
        warn: 800,
        error: 900
      }
    };
    if (object && object.transports) {
      var isWinstonObject = object.hasOwnProperty("log") && object.hasOwnProperty("level") && object.hasOwnProperty("default");
      if (isWinstonObject) {
        Object.keys(winston.default.transports).forEach(function (name) {
          config.transports.push(winston.default.transports[name]);
        });
        Object.keys(winston.default.exceptionHandlers).forEach(function (name) {
          config.transports.push(winston.default.exceptionHandlers[name]);
        });
      } else {
        config.transports = object.transports;
        this.linenumber = object.linenumber;
        this.filename = object.filename;
        this.methodname = object.methodname;
        config.exceptionHandlers = object.exceptionHandlers;
        if (object.levels) {
          config.levels = objects.levels;
        }
      }
    } else {
      config.transports.push(new winston.transports.Console());
    }
    this.logger = new winston.Logger(config);
  };
  function _getCurrentCaller() {
    try {
      var current, next, currentFile;
      var err = new Error();
      Error.prepareStackTrace = function (err, stack) {
        return stack;
      };
      current = err.stack.shift();
      currentFile = current.getFileName();
      while (err.stack.length > 0) {
        next = err.stack.shift();
        if (next.getFileName() != currentFile) {
          return next;
        }
        current = next;
      }
    } catch (err) {
    }
    return undefined;
  }
  IBMWinstonAdapter.prototype.log = function (level, msg) {
    var meta = {};
    if (this.linenumber || this.filename || this.methodname) {
      var caller = _getCurrentCaller();
      if (this.linenumber) {
        meta.line = caller.getLineNumber();
      }
      if (this.filename) {
        meta.file = caller.getFileName();
      }
      if (this.methodname) {
        meta.method = caller.getFunctionName() ? caller.getFunctionName() : "underfined";
      }
    }
    this.logger.log(level.toLowerCase(), msg, meta);
  };
  IBMWinstonAdapter.prototype.setLevel = function (level) {
    this.level = level;
    var self = this;
    Object.keys(this.logger.transports).forEach(function (key) {
      self.logger.transports[key].level = level.name.toLowerCase();
    });
  };
  IBMWinstonAdapter.prototype.getLevel = function () {
    return this.level;
  };
  return IBMWinstonAdapter;


});
define('ibm/mobile/utils/logger/adapters/IBMLog4jsAdapter', ['require','exports','module'],function (require, exports, module) {
  

var Level = function (level, levelStr) {
    this.level = level;
    this.levelStr = levelStr;
  };
  Level.prototype.toString = function () {
    return this.levelStr;
  };
  Level.prototype.isLessThanOrEqualTo = function (otherLevel) {
    if (typeof otherLevel === "string") {
      otherLevel = toLevel(otherLevel);
    }
    return this.level <= otherLevel.level;
  };
  Level.prototype.isGreaterThanOrEqualTo = function (otherLevel) {
    if (typeof otherLevel === "string") {
      otherLevel = toLevel(otherLevel);
    }
    return this.level >= otherLevel.level;
  };
  Level.prototype.isEqualTo = function (otherLevel) {
    if (typeof otherLevel == "string") {
      otherLevel = toLevel(otherLevel);
    }
    return this.level === otherLevel.level;
  };
  var IBMLog4jsAdapter = function () {
    var args = Array.prototype.slice.call(arguments);
    var object = args[0];
    var options = {};
    var category = null;
    if (arguments.length == 2) {
      category = args[1];
    } else {
      options = args[1];
      category = args[2];
    }
    var log4js = __nodeRequire("log4js");
    log4js.levels.TRACE = new Level(5000, "VERBOSE");
    var isLog4jsInstance = object.hasOwnProperty("getLogger") && object.hasOwnProperty("getDefaultLogger") && object.hasOwnProperty("addAppender");
    if (isLog4jsInstance) {
      this.logger = log4js.getDefaultLogger();
    } else {
      for (var index in object.appenders) {
        if (object.appenders[index].layout && object.appenders[index].layout.pattern) {
          var pattern = object.appenders[index].layout.pattern;
          object.appenders[index].layout.pattern = pattern.replace(/%F/g, "%x{__FILENAME__}").replace(/%M/g, "%x{__FUNCTIONNAME__}").replace(/%L/g, "%x{__LINENUMBER__}");
          if (!object.appenders[index].layout.tokens) {
            object.appenders[index].layout.tokens = {};
          }
          object.appenders[index].layout.tokens["__FILENAME__"] = function () {
            var err = new Error();
            Error.prepareStackTrace = function (err, stack) {
              return stack;
            };
            var caller = err.stack[err.stack.length - 1];
            return caller.getFileName();
          };
          object.appenders[index].layout.tokens["__FUNCTIONNAME__"] = function () {
            var err = new Error();
            Error.prepareStackTrace = function (err, stack) {
              return stack;
            };
            var caller = err.stack[err.stack.length - 1];
            var funcName = caller.getFunctionName();
            return funcName ? funcName : "undefined";
          };
          object.appenders[index].layout.tokens["__LINENUMBER__"] = function () {
            var err = new Error();
            Error.prepareStackTrace = function (err, stack) {
              return stack;
            };
            var caller = err.stack[err.stack.length - 1];
            return caller.getLineNumber();
          };
        }
      }
      log4js.configure(object, options);
      this.logger = log4js.getLogger(category);
    }
  };
  IBMLog4jsAdapter.prototype.log = function (level, msg, caller) {
    if (level.toUpperCase() == "VERBOSE") {
      this.logger.log("trace", msg);
    } else {
      this.logger.log(level.toLowerCase(), msg);
    }
  };
  IBMLog4jsAdapter.prototype.setLevel = function (level) {
    this.level = level;
    if (level.name.toUpperCase() == "VERBOSE") {
      this.logger.setLevel("TRACE");
    } else {
      this.logger.setLevel(level.name.toUpperCase());
    }
  };
  IBMLog4jsAdapter.prototype.getLevel = function () {
    return this.level;
  };
  return IBMLog4jsAdapter;


});
define('ibm/mobile/utils/IBMLogger', ['require', 'exports', 'module', '../lib/IBMUnderscore', '../lib/IBMQ', './IBMUtils', './logger/IBMLoggerLevel', './logger/adapters/IBMDefaultAdapter', './logger/adapters/IBMWinstonAdapter', './logger/adapters/IBMLog4jsAdapter'], function (require, exports, module, _, Q, IBMUtils, IBMLoggerLevel, IBMDefaultAdapter, IBMWinstonAdapter, IBMLog4jsAdapter) {
  var __umodule__ = (function (require, exports, module, _, Q, IBMUtils, IBMLoggerLevel, IBMDefaultAdapter, IBMWinstonAdapter, IBMLog4jsAdapter) {
  

var isNode = IBMUtils.isNode();
  var loggers = {};
  var IBMLogger = function (object, options) {
    var args = Array.prototype.slice.call(arguments);
    this.tag = args.shift();
    this.adapter = new IBMDefaultAdapter();
    if (isNode) {
      var object = args[0];
      var adapterClass = IBMDefaultAdapter;
      if (object && object.transports) {
        adapterClass = IBMWinstonAdapter;
      } else if (object && object.appenders) {
        if (args.length == 1 || args.length == 2) {
          args.push(this.tag);
        } else if (args.length > 2) {
          args[2] = this.tag;
        }
        adapterClass = IBMLog4jsAdapter;
      }
      this.adapter = new (Function.prototype.bind.apply(adapterClass, [null].concat(args)))();
    }
    this.adapter.setLevel(IBMLoggerLevel.INFO);
  };
  IBMLogger.getInstance = function () {
    var args = Array.prototype.slice.call(arguments);
    var tag = "DEFAULT";
    if (args.length > 0 && typeof args[0] == "string") {
      tag = args.shift().toString().toUpperCase();
    }
    var logType = "DEFAULT_LOGGER";
    if (args.length > 0) {
      var optObj = args[0];
      logType = IBMUtils.formatObject(optObj);
    }
    if (!loggers[logType] || !loggers[logType][tag]) {
      var logger = new IBMLogger(tag);
      if (isNode) {
        args.unshift(tag);
        var f = Function.prototype.bind.apply(IBMLogger, [null].concat(args));
        logger = new f();
      }
      if (!loggers[logType]) {
        loggers[logType] = {};
      }
      loggers[logType][tag] = logger;
    }
    return loggers[logType][tag];
  };
  IBMLoggerLevel.levels.forEach(function (level) {
    IBMLogger.prototype[level.name.toLowerCase()] = function () {
      if (level.weight >= this.adapter.getLevel().weight) {
        var args = Array.prototype.slice.call(arguments);
        if (level.name == "VERBOSE") {
          args.push(IBMUtils.getStackInfo());
        }
        var logMsg = this.adapter instanceof IBMLog4jsAdapter ? "" : "[" + this.tag + "]";
        args.forEach(function (logobj) {
          logMsg = logMsg == "" ? logMsg : logMsg + " ";
          logMsg += typeof logobj == "object" ? IBMUtils.formatObject(logobj) : logobj;
        });
        this.adapter.log(level.name, logMsg);
      }
    };
  });
  IBMLogger.prototype.setLevel = function (level) {
    var l = IBMLoggerLevel.getLevel(level);
    if (l) {
      this.adapter.setLevel(l);
    } else {
      throw new Error("IBMLogger does not support log level:" + level);
    }
  };
  IBMLogger.prototype.getLevel = function () {
    return this.adapter.getLevel();
  };
  return {
    getLogger: function () {
      return IBMLogger.getInstance.apply(IBMLogger, arguments);
    }
  };


}).call(this, require, exports, module, _, Q, IBMUtils, IBMLoggerLevel, IBMDefaultAdapter, IBMWinstonAdapter, IBMLog4jsAdapter);
var __old__ibmlogger0 = window['IBMLogger'];
window['IBMLogger'] = __umodule__;

__umodule__.noConflict = function () {
  window['IBMLogger'] = __old__ibmlogger0;
return __umodule__;
};
return __umodule__;
});
define('ibm/mobile/utils/IBMError', ['require', 'exports', 'module', '../lib/IBMUnderscore', './IBMUtils'], function (require, exports, module, _, utils) {
  var __umodule__ = (function (require, exports, module, _, utils) {
  

function IBMError(err) {
    var error = err || {};
    if (_.isString(error)) {
      error = { message: err };
    }
    error.message = error.message || "";
    var _error = new Error(error.message);
    if (_error && _error.stack) {
      error.stack = _error.stack;
    }
    Object.keys(error).forEach(function (key) {
      this[key] = error[key];
    }.bind(this));
  }
  IBMError.inherit = function (properties) {
    function createDefaultCtor(name) {
      return function IBMNamedError() {
        IBMError.apply(this, _.toArray(arguments));
        this.name = name;
      };
    }
    var props = properties || {}, ctor;
    if (_.isFunction(props)) {
      ctor = props;
      props = arguments[1] || {};
      props.constructor = ctor;
    } else {
      ctor = props.constructor;
    }
    if (ctor === Object) {
      ctor = props.constructor = createDefaultCtor(props.name || IBMError.name);
    } else if (!props.name) {
      if (ctor.name && ctor.name !== "Object" && ctor.name !== "Function") {
        props.name = ctor.name;
      } else {
        props.name = IBMError.name;
      }
    }
    return utils.inherit(IBMError, ctor, props);
  };
  return utils.inherit(Error, IBMError, {
    name: "IBMError",
    toString: function () {
      return this.name + " - " + this.message;
    }
  });


}).call(this, require, exports, module, _, utils);
var __old__ibmerror0 = window['IBMError'];
window['IBMError'] = __umodule__;

__umodule__.noConflict = function () {
  window['IBMError'] = __old__ibmerror0;
return __umodule__;
};
return __umodule__;
});
define('ibm/mobile/utils/http/_HttpRequestMixin', ['require', 'exports', 'module', '../../lib/IBMUnderscore', '../../lib/IBMQ', '../IBMLogger', '../IBMError'], function (require, exports, module, _, Q, IBMLogger, IBMError) {
  

var logger = IBMLogger.getLogger();
  var IBMBluemix = IBMBluemix;
  var CONTEXT_HEADERS = function (config) {
    var token = config.currentUser && config.currentUser.securityToken, provider = config.currentUser && config.currentUser.securityProvider, deviceType = "WEB", deviceId = config.currentDevice && config.currentDevice.hardwareId, deviceModel = config.currentDevice && config.currentDevice.model, platformVersion = config.currentDevice && config.currentDevice.platformVersion, name = config.currentDevice && config.currentDevice.name;
    var headers = [
      {
        header: "IBM-Application-ID",
        value: config.applicationId
      },
      {
        header: "IBM-Application-Secret",
        value: config.applicationSecret
      },
      {
        header: "IBM-Package-ID",
        value: config.packageId
      },
      {
        header: "IBM-SDK-Core-Version",
        value: config.version
      },
      {
        header: "IBM-SDK-Service-Version",
        value: ""
      },
      {
        header: "IBM-SDK-Service-Name",
        value: ""
      },
      {
        header: "IBM-Security-Token",
        value: token
      },
      {
        header: "IBM-Security-Provider",
        value: provider
      },
      {
        header: "IBM-Device-Type",
        value: deviceType
      },
      {
        header: "IBM-Device-ID",
        value: deviceId
      },
      {
        header: "IBM-Device-Model",
        value: deviceModel
      },
      {
        header: "IBM-Device-Platform-Version",
        value: platformVersion
      },
      {
        header: "IBM-Device-Name",
        value: name
      },
      {
        header: "IBM-Request-Correlation-ID",
        value: Date.now()
      }
    ];
    var normalizedHeaders = headers.map(function (headerMap) {
      return {
        header: headerMap.header.toUpperCase(),
        value: headerMap.value
      };
    });
    return normalizedHeaders;
  };
  var HttpRequestError = function (message, info) {
    info = info || {};
    return new IBMError({
      name: "HttpRequestError",
      message: message,
      info: info
    });
  };
  var ErrorServerStatus = function (code, responseBody, info) {
    info = info || {};
    var err = {
      statusCode: code,
      responseText: responseBody
    };
    _.extend(err, info);
    return HttpRequestError("Server responded with an error status: " + code, err);
  };
  var ErrorCommunicating = function (info) {
    info = info || {};
    return HttpRequestError("Error communicating with server", info);
  };
  var _HttpErrors = {
    HttpRequestError: HttpRequestError,
    ErrorServerStatus: ErrorServerStatus,
    ErrorCommunicating: ErrorCommunicating
  };
  var _HttpRequestMixin = {
    config: null,
    errors: _HttpErrors,
    validOptions: [
      "url",
      "method",
      "headers",
      "data",
      "contentType",
      "handleAs",
      "timeout",
      "rewriteDomain"
    ],
    contentTypeMap: {
      json: "application/json",
      text: "text/plain",
      form: "application/x-www-form-urlencoded",
      "default": "application/x-www-form-urlencoded",
      html: "text/html",
      multipart: true
    },
    defaultOptions: {
      method: "get",
      headers: {},
      handleAs: "text",
      timeout: 10000
    },
    _getValidOptions: function (options) {
      _.keys(options).forEach(function (key) {
        if (this.validOptions.indexOf(key) < 0) {
          logger.warn("-> Removed option: " + key);
          delete options[key];
        }
      }.bind(this));
      _.keys(this.defaultOptions).forEach(function (key) {
        if (key === "timeout" && !_.isEmpty(this.config)) {
          options[key] = this.config.getTimeout();
        } else if (_.isUndefined(options[key])) {
          options[key] = this.defaultOptions[key];
        }
      }.bind(this));
      return options;
    },
    _convertUsingMap: function (map, options) {
      _.keys(map).forEach(function (key) {
        var val = options[key];
        options[map[key]] = val;
        delete options[key];
      });
      return options;
    },
    _augmentHeaders: function (options) {
      var headers = options.headers = options.headers || {}, validContentTypes = this.contentTypeMap, _self = this;
      function _augmentWithContentType(type, headers) {
        if (!type || type === "multipart") {
          return headers;
        }
        var header = validContentTypes[type];
        if (!header) {
          console.warn("Unknown contentType: " + type);
        } else {
          headers["Content-Type"] = header + "; charset=UTF-8";
        }
        return headers;
      }
      function _augmentWithContext(headers) {
        var config = _self.config;
        if (!config) {
          var errMsg = "Unable to complete request. SDK hasn't been initialized.";
          logger.error(errMsg);
          throw new Error(errMsg);
        }
        var contexts = CONTEXT_HEADERS(config);
        if (_.isUndefined(options.rewriteDomain) || options.rewriteDomain === true) {
          contexts.push({
            header: "X-REWRITE-DOMAIN",
            value: config.getRewriteDomain()
          });
        } else {
          if (_.has(headers, "X-REWRITE-DOMAIN")) {
            delete headers["X-REWRITE-DOMAIN"];
          }
        }
        delete options.rewriteDomain;
        var suppliedHeaders = _.keys(headers).map(function (headerName) {
          return headerName.toUpperCase();
        });
        contexts.forEach(function (context) {
          var isInSuppliedHeaders = _.contains(suppliedHeaders, context.header.toUpperCase());
          if (isInSuppliedHeaders) {
          }
          if (context.value && !isInSuppliedHeaders) {
            headers[context.header] = context.value;
          }
        });
        return headers;
      }
      var contentType = options["contentType"];
      contentType = _.isString(contentType) ? contentType : "";
      if (options.data) {
        if (!contentType) {
          contentType = "default";
        }
        contentType.trim().toLowerCase();
        _augmentWithContentType(contentType, headers);
      }
      _augmentWithContext(headers);
      return options;
    },
    createOptions: function (map, options) {
      var optionsToSend = _.clone(options);
      this._getValidOptions(optionsToSend);
      this._augmentHeaders(optionsToSend);
      return this._convertUsingMap(map, optionsToSend);
    },
    postProcessResponse: function (response, handleAs) {
      switch (handleAs) {
      case "text":
        if (_.isString(response)) {
          return response;
        } else {
          return JSON.stringify(response);
        }
      case "json":
        if (_.isObject(response)) {
          return response;
        } else if (_.isString(response)) {
          try {
            var parsedResponse = JSON.parse(response);
            return parsedResponse;
          } catch (ex) {
            throw ex;
          }
        }
      default:
        console.warn("Unsupported handleAs: " + handleAs);
        return "";
      }
    },
    send: function () {
      var _self = this, args = _.toArray(arguments);
      if (!IBMBluemix || !_self.config) {
        var defer = Q.defer();
        require(["../../IBMBluemix"], function (IBMBluemix) {
          _self.config = IBMBluemix && IBMBluemix.getConfig();
          defer.resolve(IBMBluemix);
        });
      } else {
        defer.resolve();
      }
      return defer.promise.then(function () {
        return _self._send.apply(_self, _.toArray(args));
      });
    },
    _send: function () {
      throw new Error("Called unimplemented _HttpRequestMixin._send()");
    }
  };
  return _HttpRequestMixin;


});
define('ibm/mobile/utils/http/NodeHttpRequest', ['require', 'exports', 'module', '../../lib/IBMUnderscore', '../../lib/IBMQ', './_HttpRequestMixin'], function (require, exports, module, _, Q, _HttpRequestMixin) {
  

var ErrorCommunicating = _HttpRequestMixin.errors.ErrorCommunicating, HttpRequestError = _HttpRequestMixin.errors.HttpRequestError, ErrorServerStatus = _HttpRequestMixin.errors.ErrorServerStatus;
  var NodeHttpRequest = _.extend({}, _HttpRequestMixin, {
    nodeRequestModule: null,
    _onFinish: function (handleAs, defer) {
      var self = this;
      return function (err, res, body) {
        if (err) {
          defer.reject(ErrorCommunicating({ error: err }));
        } else {
          if (res && res.statusCode < 400) {
            try {
              var toReturn = self.postProcessResponse(body, handleAs);
              defer.resolve(toReturn);
            } catch (ex) {
              console.error("JSON Parse Error on response");
              console.dir(ex);
              defer.reject(HttpRequestError("JSON Parse error", { exception: ex }));
            }
          } else {
            defer.reject(ErrorServerStatus(res.statusCode, body));
          }
        }
      };
    },
    _send: function (options) {
      if (!this.nodeRequestModule) {
        this.nodeRequestModule = require("request");
        if (!this.nodeRequestModule) {
          throw new TypeError("Unable to retrieve `request` module. Was 'npm install' called?");
        }
      }
      var requestOptions = this.createOptions({ "data": "body" }, options), defer = Q.defer();
      if (requestOptions.contentType == "multipart") {
        console.warn("multipart request not yet supported for IBMHttpRequest in Node");
      }
      this.nodeRequestModule(requestOptions, this._onFinish(requestOptions["handleAs"], defer));
      return defer.promise.catch(function (err) {
        if (err && err.info) {
          err.info.requestHeaders = requestOptions.headers;
          err.info.requestOptions = requestOptions;
        }
        return Q.reject(err);
      });
    }
  });
  return NodeHttpRequest;


});
/* istanbul ignore next */
define( 'ibm/mobile/lib/IBMAjax', ['require','exports','module'],function (require, exports, module) {
  

var isNode = typeof __isNode === "boolean" ? __isNode : typeof exports === "object";
  if (isNode) {
    return;
  }
  var arr = [];
  var slice = arr.slice;
  var concat = arr.concat;
  var push = arr.push;
  var indexOf = arr.indexOf;
  var class2type = {};
  var toString = class2type.toString;
  var hasOwn = class2type.hasOwnProperty;
  var support = {};
  var document = window.document, version = "2.1.1pre -ajax/script,-ajax/jsonp,-css,-css/addGetHookIf,-css/curCSS,-css/defaultDisplay,-css/hiddenVisibleSelectors,-css/support,-css/swap,-css/var/cssExpand,-css/var/getStyles,-css/var/isHidden,-css/var/rmargin,-css/var/rnumnonpx,-effects,-effects/Tween,-effects/animatedSelector,-dimensions,-offset,-deprecated,-wrap,-exports/amd", jQuery = function (selector, context) {
      return new jQuery.fn.init(selector, context);
    }, rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, rmsPrefix = /^-ms-/, rdashAlpha = /-([\da-z])/gi, fcamelCase = function (all, letter) {
      return letter.toUpperCase();
    };
  jQuery.fn = jQuery.prototype = {
    jquery: version,
    constructor: jQuery,
    selector: "",
    length: 0,
    toArray: function () {
      return slice.call(this);
    },
    get: function (num) {
      return num != null ? num < 0 ? this[num + this.length] : this[num] : slice.call(this);
    },
    pushStack: function (elems) {
      var ret = jQuery.merge(this.constructor(), elems);
      ret.prevObject = this;
      ret.context = this.context;
      return ret;
    },
    each: function (callback, args) {
      return jQuery.each(this, callback, args);
    },
    map: function (callback) {
      return this.pushStack(jQuery.map(this, function (elem, i) {
        return callback.call(elem, i, elem);
      }));
    },
    slice: function () {
      return this.pushStack(slice.apply(this, arguments));
    },
    first: function () {
      return this.eq(0);
    },
    last: function () {
      return this.eq(-1);
    },
    eq: function (i) {
      var len = this.length, j = +i + (i < 0 ? len : 0);
      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
    },
    end: function () {
      return this.prevObject || this.constructor(null);
    },
    push: push,
    sort: arr.sort,
    splice: arr.splice
  };
  jQuery.extend = jQuery.fn.extend = function () {
    var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
    if (typeof target === "boolean") {
      deep = target;
      target = arguments[i] || {};
      i++;
    }
    if (typeof target !== "object" && !jQuery.isFunction(target)) {
      target = {};
    }
    if (i === length) {
      target = this;
      i--;
    }
    for (; i < length; i++) {
      if ((options = arguments[i]) != null) {
        for (name in options) {
          src = target[name];
          copy = options[name];
          if (target === copy) {
            continue;
          }
          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
            if (copyIsArray) {
              copyIsArray = false;
              clone = src && jQuery.isArray(src) ? src : [];
            } else {
              clone = src && jQuery.isPlainObject(src) ? src : {};
            }
            target[name] = jQuery.extend(deep, clone, copy);
          } else if (copy !== undefined) {
            target[name] = copy;
          }
        }
      }
    }
    return target;
  };
  jQuery.extend({
    expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
    isReady: true,
    error: function (msg) {
      throw new Error(msg);
    },
    noop: function () {
    },
    isFunction: function (obj) {
      return jQuery.type(obj) === "function";
    },
    isArray: Array.isArray,
    isWindow: function (obj) {
      return obj != null && obj === obj.window;
    },
    isNumeric: function (obj) {
      return !jQuery.isArray(obj) && obj - parseFloat(obj) >= 0;
    },
    isPlainObject: function (obj) {
      if (jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
        return false;
      }
      if (obj.constructor && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
        return false;
      }
      return true;
    },
    isEmptyObject: function (obj) {
      var name;
      for (name in obj) {
        return false;
      }
      return true;
    },
    type: function (obj) {
      if (obj == null) {
        return obj + "";
      }
      return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;
    },
    globalEval: function (code) {
      var script, indirect = eval;
      code = jQuery.trim(code);
      if (code) {
        if (code.indexOf("use strict") === 1) {
          script = document.createElement("script");
          script.text = code;
          document.head.appendChild(script).parentNode.removeChild(script);
        } else {
          indirect(code);
        }
      }
    },
    camelCase: function (string) {
      return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
    },
    nodeName: function (elem, name) {
      return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
    },
    each: function (obj, callback, args) {
      var value, i = 0, length = obj.length, isArray = isArraylike(obj);
      if (args) {
        if (isArray) {
          for (; i < length; i++) {
            value = callback.apply(obj[i], args);
            if (value === false) {
              break;
            }
          }
        } else {
          for (i in obj) {
            value = callback.apply(obj[i], args);
            if (value === false) {
              break;
            }
          }
        }
      } else {
        if (isArray) {
          for (; i < length; i++) {
            value = callback.call(obj[i], i, obj[i]);
            if (value === false) {
              break;
            }
          }
        } else {
          for (i in obj) {
            value = callback.call(obj[i], i, obj[i]);
            if (value === false) {
              break;
            }
          }
        }
      }
      return obj;
    },
    trim: function (text) {
      return text == null ? "" : (text + "").replace(rtrim, "");
    },
    makeArray: function (arr, results) {
      var ret = results || [];
      if (arr != null) {
        if (isArraylike(Object(arr))) {
          jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
        } else {
          push.call(ret, arr);
        }
      }
      return ret;
    },
    inArray: function (elem, arr, i) {
      return arr == null ? -1 : indexOf.call(arr, elem, i);
    },
    merge: function (first, second) {
      var len = +second.length, j = 0, i = first.length;
      for (; j < len; j++) {
        first[i++] = second[j];
      }
      first.length = i;
      return first;
    },
    grep: function (elems, callback, invert) {
      var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
      for (; i < length; i++) {
        callbackInverse = !callback(elems[i], i);
        if (callbackInverse !== callbackExpect) {
          matches.push(elems[i]);
        }
      }
      return matches;
    },
    map: function (elems, callback, arg) {
      var value, i = 0, length = elems.length, isArray = isArraylike(elems), ret = [];
      if (isArray) {
        for (; i < length; i++) {
          value = callback(elems[i], i, arg);
          if (value != null) {
            ret.push(value);
          }
        }
      } else {
        for (i in elems) {
          value = callback(elems[i], i, arg);
          if (value != null) {
            ret.push(value);
          }
        }
      }
      return concat.apply([], ret);
    },
    guid: 1,
    proxy: function (fn, context) {
      var tmp, args, proxy;
      if (typeof context === "string") {
        tmp = fn[context];
        context = fn;
        fn = tmp;
      }
      if (!jQuery.isFunction(fn)) {
        return undefined;
      }
      args = slice.call(arguments, 2);
      proxy = function () {
        return fn.apply(context || this, args.concat(slice.call(arguments)));
      };
      proxy.guid = fn.guid = fn.guid || jQuery.guid++;
      return proxy;
    },
    now: Date.now,
    support: support
  });
  jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (i, name) {
    class2type["[object " + name + "]"] = name.toLowerCase();
  });
  function isArraylike(obj) {
    var length = obj.length, type = jQuery.type(obj);
    if (type === "function" || jQuery.isWindow(obj)) {
      return false;
    }
    if (obj.nodeType === 1 && length) {
      return true;
    }
    return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
  }
  var docElem = window.document.documentElement, selector_hasDuplicate, matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector, selector_sortOrder = function (a, b) {
      if (a === b) {
        selector_hasDuplicate = true;
        return 0;
      }
      var compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition(b);
      if (compare) {
        if (compare & 1) {
          if (a === document || jQuery.contains(document, a)) {
            return -1;
          }
          if (b === document || jQuery.contains(document, b)) {
            return 1;
          }
          return 0;
        }
        return compare & 4 ? -1 : 1;
      }
      return a.compareDocumentPosition ? -1 : 1;
    };
  jQuery.extend({
    find: function (selector, context, results, seed) {
      var elem, nodeType, i = 0;
      results = results || [];
      context = context || document;
      if (!selector || typeof selector !== "string") {
        return results;
      }
      if ((nodeType = context.nodeType) !== 1 && nodeType !== 9) {
        return [];
      }
      if (seed) {
        while (elem = seed[i++]) {
          if (jQuery.find.matchesSelector(elem, selector)) {
            results.push(elem);
          }
        }
      } else {
        jQuery.merge(results, context.querySelectorAll(selector));
      }
      return results;
    },
    unique: function (results) {
      var elem, duplicates = [], i = 0, j = 0;
      selector_hasDuplicate = false;
      results.sort(selector_sortOrder);
      if (selector_hasDuplicate) {
        while (elem = results[i++]) {
          if (elem === results[i]) {
            j = duplicates.push(i);
          }
        }
        while (j--) {
          results.splice(duplicates[j], 1);
        }
      }
      return results;
    },
    text: function (elem) {
      var node, ret = "", i = 0, nodeType = elem.nodeType;
      if (!nodeType) {
        while (node = elem[i++]) {
          ret += jQuery.text(node);
        }
      } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
        return elem.textContent;
      } else if (nodeType === 3 || nodeType === 4) {
        return elem.nodeValue;
      }
      return ret;
    },
    contains: function (a, b) {
      var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
      return a === bup || !!(bup && bup.nodeType === 1 && adown.contains(bup));
    },
    isXMLDoc: function (elem) {
      return (elem.ownerDocument || elem).documentElement.nodeName !== "HTML";
    },
    expr: {
      attrHandle: {},
      match: {
        bool: /^(?:checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped)$/i,
        needsContext: /^[\x20\t\r\n\f]*[>+~]/
      }
    }
  });
  jQuery.extend(jQuery.find, {
    matches: function (expr, elements) {
      return jQuery.find(expr, null, null, elements);
    },
    matchesSelector: function (elem, expr) {
      return matches.call(elem, expr);
    },
    attr: function (elem, name) {
      return elem.getAttribute(name);
    }
  });
  var rneedsContext = jQuery.expr.match.needsContext;
  var rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
  var risSimple = /^.[^:#\[\.,]*$/;
  function winnow(elements, qualifier, not) {
    if (jQuery.isFunction(qualifier)) {
      return jQuery.grep(elements, function (elem, i) {
        return !!qualifier.call(elem, i, elem) !== not;
      });
    }
    if (qualifier.nodeType) {
      return jQuery.grep(elements, function (elem) {
        return elem === qualifier !== not;
      });
    }
    if (typeof qualifier === "string") {
      if (risSimple.test(qualifier)) {
        return jQuery.filter(qualifier, elements, not);
      }
      qualifier = jQuery.filter(qualifier, elements);
    }
    return jQuery.grep(elements, function (elem) {
      return indexOf.call(qualifier, elem) >= 0 !== not;
    });
  }
  jQuery.filter = function (expr, elems, not) {
    var elem = elems[0];
    if (not) {
      expr = ":not(" + expr + ")";
    }
    return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
      return elem.nodeType === 1;
    }));
  };
  jQuery.fn.extend({
    find: function (selector) {
      var i, len = this.length, ret = [], self = this;
      if (typeof selector !== "string") {
        return this.pushStack(jQuery(selector).filter(function () {
          for (i = 0; i < len; i++) {
            if (jQuery.contains(self[i], this)) {
              return true;
            }
          }
        }));
      }
      for (i = 0; i < len; i++) {
        jQuery.find(selector, self[i], ret);
      }
      ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
      ret.selector = this.selector ? this.selector + " " + selector : selector;
      return ret;
    },
    filter: function (selector) {
      return this.pushStack(winnow(this, selector || [], false));
    },
    not: function (selector) {
      return this.pushStack(winnow(this, selector || [], true));
    },
    is: function (selector) {
      return !!winnow(this, typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
    }
  });
  var rootjQuery, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, init = jQuery.fn.init = function (selector, context) {
      var match, elem;
      if (!selector) {
        return this;
      }
      if (typeof selector === "string") {
        if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
          match = [
            null,
            selector,
            null
          ];
        } else {
          match = rquickExpr.exec(selector);
        }
        if (match && (match[1] || !context)) {
          if (match[1]) {
            context = context instanceof jQuery ? context[0] : context;
            jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
            if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
              for (match in context) {
                if (jQuery.isFunction(this[match])) {
                  this[match](context[match]);
                } else {
                  this.attr(match, context[match]);
                }
              }
            }
            return this;
          } else {
            elem = document.getElementById(match[2]);
            if (elem && elem.parentNode) {
              this.length = 1;
              this[0] = elem;
            }
            this.context = document;
            this.selector = selector;
            return this;
          }
        } else if (!context || context.jquery) {
          return (context || rootjQuery).find(selector);
        } else {
          return this.constructor(context).find(selector);
        }
      } else if (selector.nodeType) {
        this.context = this[0] = selector;
        this.length = 1;
        return this;
      } else if (jQuery.isFunction(selector)) {
        return typeof rootjQuery.ready !== "undefined" ? rootjQuery.ready(selector) : selector(jQuery);
      }
      if (selector.selector !== undefined) {
        this.selector = selector.selector;
        this.context = selector.context;
      }
      return jQuery.makeArray(selector, this);
    };
  init.prototype = jQuery.fn;
  rootjQuery = jQuery(document);
  var rparentsprev = /^(?:parents|prev(?:Until|All))/, guaranteedUnique = {
      children: true,
      contents: true,
      next: true,
      prev: true
    };
  jQuery.extend({
    dir: function (elem, dir, until) {
      var matched = [], truncate = until !== undefined;
      while ((elem = elem[dir]) && elem.nodeType !== 9) {
        if (elem.nodeType === 1) {
          if (truncate && jQuery(elem).is(until)) {
            break;
          }
          matched.push(elem);
        }
      }
      return matched;
    },
    sibling: function (n, elem) {
      var matched = [];
      for (; n; n = n.nextSibling) {
        if (n.nodeType === 1 && n !== elem) {
          matched.push(n);
        }
      }
      return matched;
    }
  });
  jQuery.fn.extend({
    has: function (target) {
      var targets = jQuery(target, this), l = targets.length;
      return this.filter(function () {
        var i = 0;
        for (; i < l; i++) {
          if (jQuery.contains(this, targets[i])) {
            return true;
          }
        }
      });
    },
    closest: function (selectors, context) {
      var cur, i = 0, l = this.length, matched = [], pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;
      for (; i < l; i++) {
        for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
          if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
            matched.push(cur);
            break;
          }
        }
      }
      return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);
    },
    index: function (elem) {
      if (!elem) {
        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
      }
      if (typeof elem === "string") {
        return indexOf.call(jQuery(elem), this[0]);
      }
      return indexOf.call(this, elem.jquery ? elem[0] : elem);
    },
    add: function (selector, context) {
      return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))));
    },
    addBack: function (selector) {
      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
    }
  });
  function sibling(cur, dir) {
    while ((cur = cur[dir]) && cur.nodeType !== 1) {
    }
    return cur;
  }
  jQuery.each({
    parent: function (elem) {
      var parent = elem.parentNode;
      return parent && parent.nodeType !== 11 ? parent : null;
    },
    parents: function (elem) {
      return jQuery.dir(elem, "parentNode");
    },
    parentsUntil: function (elem, i, until) {
      return jQuery.dir(elem, "parentNode", until);
    },
    next: function (elem) {
      return sibling(elem, "nextSibling");
    },
    prev: function (elem) {
      return sibling(elem, "previousSibling");
    },
    nextAll: function (elem) {
      return jQuery.dir(elem, "nextSibling");
    },
    prevAll: function (elem) {
      return jQuery.dir(elem, "previousSibling");
    },
    nextUntil: function (elem, i, until) {
      return jQuery.dir(elem, "nextSibling", until);
    },
    prevUntil: function (elem, i, until) {
      return jQuery.dir(elem, "previousSibling", until);
    },
    siblings: function (elem) {
      return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
    },
    children: function (elem) {
      return jQuery.sibling(elem.firstChild);
    },
    contents: function (elem) {
      return elem.contentDocument || jQuery.merge([], elem.childNodes);
    }
  }, function (name, fn) {
    jQuery.fn[name] = function (until, selector) {
      var matched = jQuery.map(this, fn, until);
      if (name.slice(-5) !== "Until") {
        selector = until;
      }
      if (selector && typeof selector === "string") {
        matched = jQuery.filter(selector, matched);
      }
      if (this.length > 1) {
        if (!guaranteedUnique[name]) {
          jQuery.unique(matched);
        }
        if (rparentsprev.test(name)) {
          matched.reverse();
        }
      }
      return this.pushStack(matched);
    };
  });
  var rnotwhite = /\S+/g;
  var optionsCache = {};
  function createOptions(options) {
    var object = optionsCache[options] = {};
    jQuery.each(options.match(rnotwhite) || [], function (_, flag) {
      object[flag] = true;
    });
    return object;
  }
  jQuery.Callbacks = function (options) {
    options = typeof options === "string" ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);
    var memory, fired, firing, firingStart, firingLength, firingIndex, list = [], stack = !options.once && [], fire = function (data) {
        memory = options.memory && data;
        fired = true;
        firingIndex = firingStart || 0;
        firingStart = 0;
        firingLength = list.length;
        firing = true;
        for (; list && firingIndex < firingLength; firingIndex++) {
          if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
            memory = false;
            break;
          }
        }
        firing = false;
        if (list) {
          if (stack) {
            if (stack.length) {
              fire(stack.shift());
            }
          } else if (memory) {
            list = [];
          } else {
            self.disable();
          }
        }
      }, self = {
        add: function () {
          if (list) {
            var start = list.length;
            (function add(args) {
              jQuery.each(args, function (_, arg) {
                var type = jQuery.type(arg);
                if (type === "function") {
                  if (!options.unique || !self.has(arg)) {
                    list.push(arg);
                  }
                } else if (arg && arg.length && type !== "string") {
                  add(arg);
                }
              });
            }(arguments));
            if (firing) {
              firingLength = list.length;
            } else if (memory) {
              firingStart = start;
              fire(memory);
            }
          }
          return this;
        },
        remove: function () {
          if (list) {
            jQuery.each(arguments, function (_, arg) {
              var index;
              while ((index = jQuery.inArray(arg, list, index)) > -1) {
                list.splice(index, 1);
                if (firing) {
                  if (index <= firingLength) {
                    firingLength--;
                  }
                  if (index <= firingIndex) {
                    firingIndex--;
                  }
                }
              }
            });
          }
          return this;
        },
        has: function (fn) {
          return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
        },
        empty: function () {
          list = [];
          firingLength = 0;
          return this;
        },
        disable: function () {
          list = stack = memory = undefined;
          return this;
        },
        disabled: function () {
          return !list;
        },
        lock: function () {
          stack = undefined;
          if (!memory) {
            self.disable();
          }
          return this;
        },
        locked: function () {
          return !stack;
        },
        fireWith: function (context, args) {
          if (list && (!fired || stack)) {
            args = args || [];
            args = [
              context,
              args.slice ? args.slice() : args
            ];
            if (firing) {
              stack.push(args);
            } else {
              fire(args);
            }
          }
          return this;
        },
        fire: function () {
          self.fireWith(this, arguments);
          return this;
        },
        fired: function () {
          return !!fired;
        }
      };
    return self;
  };
  jQuery.extend({
    Deferred: function (func) {
      var tuples = [
          [
            "resolve",
            "done",
            jQuery.Callbacks("once memory"),
            "resolved"
          ],
          [
            "reject",
            "fail",
            jQuery.Callbacks("once memory"),
            "rejected"
          ],
          [
            "notify",
            "progress",
            jQuery.Callbacks("memory")
          ]
        ], state = "pending", promise = {
          state: function () {
            return state;
          },
          always: function () {
            deferred.done(arguments).fail(arguments);
            return this;
          },
          then: function () {
            var fns = arguments;
            return jQuery.Deferred(function (newDefer) {
              jQuery.each(tuples, function (i, tuple) {
                var fn = jQuery.isFunction(fns[i]) && fns[i];
                deferred[tuple[1]](function () {
                  var returned = fn && fn.apply(this, arguments);
                  if (returned && jQuery.isFunction(returned.promise)) {
                    returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
                  } else {
                    newDefer[tuple[0] + "With"](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);
                  }
                });
              });
              fns = null;
            }).promise();
          },
          promise: function (obj) {
            return obj != null ? jQuery.extend(obj, promise) : promise;
          }
        }, deferred = {};
      promise.pipe = promise.then;
      jQuery.each(tuples, function (i, tuple) {
        var list = tuple[2], stateString = tuple[3];
        promise[tuple[1]] = list.add;
        if (stateString) {
          list.add(function () {
            state = stateString;
          }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
        }
        deferred[tuple[0]] = function () {
          deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments);
          return this;
        };
        deferred[tuple[0] + "With"] = list.fireWith;
      });
      promise.promise(deferred);
      if (func) {
        func.call(deferred, deferred);
      }
      return deferred;
    },
    when: function (subordinate) {
      var i = 0, resolveValues = slice.call(arguments), length = resolveValues.length, remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0, deferred = remaining === 1 ? subordinate : jQuery.Deferred(), updateFunc = function (i, contexts, values) {
          return function (value) {
            contexts[i] = this;
            values[i] = arguments.length > 1 ? slice.call(arguments) : value;
            if (values === progressValues) {
              deferred.notifyWith(contexts, values);
            } else if (!--remaining) {
              deferred.resolveWith(contexts, values);
            }
          };
        }, progressValues, progressContexts, resolveContexts;
      if (length > 1) {
        progressValues = new Array(length);
        progressContexts = new Array(length);
        resolveContexts = new Array(length);
        for (; i < length; i++) {
          if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
            resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));
          } else {
            --remaining;
          }
        }
      }
      if (!remaining) {
        deferred.resolveWith(resolveContexts, resolveValues);
      }
      return deferred.promise();
    }
  });
  var readyList;
  jQuery.fn.ready = function (fn) {
    jQuery.ready.promise().done(fn);
    return this;
  };
  jQuery.extend({
    isReady: false,
    readyWait: 1,
    holdReady: function (hold) {
      if (hold) {
        jQuery.readyWait++;
      } else {
        jQuery.ready(true);
      }
    },
    ready: function (wait) {
      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
        return;
      }
      jQuery.isReady = true;
      if (wait !== true && --jQuery.readyWait > 0) {
        return;
      }
      readyList.resolveWith(document, [jQuery]);
      if (jQuery.fn.triggerHandler) {
        jQuery(document).triggerHandler("ready");
        jQuery(document).off("ready");
      }
    }
  });
  function completed() {
    document.removeEventListener("DOMContentLoaded", completed, false);
    window.removeEventListener("load", completed, false);
    jQuery.ready();
  }
  jQuery.ready.promise = function (obj) {
    if (!readyList) {
      readyList = jQuery.Deferred();
      if (document.readyState === "complete") {
        setTimeout(jQuery.ready);
      } else {
        document.addEventListener("DOMContentLoaded", completed, false);
        window.addEventListener("load", completed, false);
      }
    }
    return readyList.promise(obj);
  };
  jQuery.ready.promise();
  var access = jQuery.access = function (elems, fn, key, value, chainable, emptyGet, raw) {
    var i = 0, len = elems.length, bulk = key == null;
    if (jQuery.type(key) === "object") {
      chainable = true;
      for (i in key) {
        jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
      }
    } else if (value !== undefined) {
      chainable = true;
      if (!jQuery.isFunction(value)) {
        raw = true;
      }
      if (bulk) {
        if (raw) {
          fn.call(elems, value);
          fn = null;
        } else {
          bulk = fn;
          fn = function (elem, key, value) {
            return bulk.call(jQuery(elem), value);
          };
        }
      }
      if (fn) {
        for (; i < len; i++) {
          fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
        }
      }
    }
    return chainable ? elems : bulk ? fn.call(elems) : len ? fn(elems[0], key) : emptyGet;
  };
  jQuery.acceptData = function (owner) {
    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
  };
  function Data() {
    Object.defineProperty(this.cache = {}, 0, {
      get: function () {
        return {};
      }
    });
    this.expando = jQuery.expando + Math.random();
  }
  Data.uid = 1;
  Data.accepts = jQuery.acceptData;
  Data.prototype = {
    key: function (owner) {
      if (!Data.accepts(owner)) {
        return 0;
      }
      var descriptor = {}, unlock = owner[this.expando];
      if (!unlock) {
        unlock = Data.uid++;
        try {
          descriptor[this.expando] = { value: unlock };
          Object.defineProperties(owner, descriptor);
        } catch (e) {
          descriptor[this.expando] = unlock;
          jQuery.extend(owner, descriptor);
        }
      }
      if (!this.cache[unlock]) {
        this.cache[unlock] = {};
      }
      return unlock;
    },
    set: function (owner, data, value) {
      var prop, unlock = this.key(owner), cache = this.cache[unlock];
      if (typeof data === "string") {
        cache[data] = value;
      } else {
        if (jQuery.isEmptyObject(cache)) {
          jQuery.extend(this.cache[unlock], data);
        } else {
          for (prop in data) {
            cache[prop] = data[prop];
          }
        }
      }
      return cache;
    },
    get: function (owner, key) {
      var cache = this.cache[this.key(owner)];
      return key === undefined ? cache : cache[key];
    },
    access: function (owner, key, value) {
      var stored;
      if (key === undefined || key && typeof key === "string" && value === undefined) {
        stored = this.get(owner, key);
        return stored !== undefined ? stored : this.get(owner, jQuery.camelCase(key));
      }
      this.set(owner, key, value);
      return value !== undefined ? value : key;
    },
    remove: function (owner, key) {
      var i, name, camel, unlock = this.key(owner), cache = this.cache[unlock];
      if (key === undefined) {
        this.cache[unlock] = {};
      } else {
        if (jQuery.isArray(key)) {
          name = key.concat(key.map(jQuery.camelCase));
        } else {
          camel = jQuery.camelCase(key);
          if (key in cache) {
            name = [
              key,
              camel
            ];
          } else {
            name = camel;
            name = name in cache ? [name] : name.match(rnotwhite) || [];
          }
        }
        i = name.length;
        while (i--) {
          delete cache[name[i]];
        }
      }
    },
    hasData: function (owner) {
      return !jQuery.isEmptyObject(this.cache[owner[this.expando]] || {});
    },
    discard: function (owner) {
      if (owner[this.expando]) {
        delete this.cache[owner[this.expando]];
      }
    }
  };
  var data_priv = new Data();
  var data_user = new Data();
  var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /([A-Z])/g;
  function dataAttr(elem, key, data) {
    var name;
    if (data === undefined && elem.nodeType === 1) {
      name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
      data = elem.getAttribute(name);
      if (typeof data === "string") {
        try {
          data = data === "true" ? true : data === "false" ? false : data === "null" ? null : +data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
        } catch (e) {
        }
        data_user.set(elem, key, data);
      } else {
        data = undefined;
      }
    }
    return data;
  }
  jQuery.extend({
    hasData: function (elem) {
      return data_user.hasData(elem) || data_priv.hasData(elem);
    },
    data: function (elem, name, data) {
      return data_user.access(elem, name, data);
    },
    removeData: function (elem, name) {
      data_user.remove(elem, name);
    },
    _data: function (elem, name, data) {
      return data_priv.access(elem, name, data);
    },
    _removeData: function (elem, name) {
      data_priv.remove(elem, name);
    }
  });
  jQuery.fn.extend({
    data: function (key, value) {
      var i, name, data, elem = this[0], attrs = elem && elem.attributes;
      if (key === undefined) {
        if (this.length) {
          data = data_user.get(elem);
          if (elem.nodeType === 1 && !data_priv.get(elem, "hasDataAttrs")) {
            i = attrs.length;
            while (i--) {
              name = attrs[i].name;
              if (name.indexOf("data-") === 0) {
                name = jQuery.camelCase(name.slice(5));
                dataAttr(elem, name, data[name]);
              }
            }
            data_priv.set(elem, "hasDataAttrs", true);
          }
        }
        return data;
      }
      if (typeof key === "object") {
        return this.each(function () {
          data_user.set(this, key);
        });
      }
      return access(this, function (value) {
        var data, camelKey = jQuery.camelCase(key);
        if (elem && value === undefined) {
          data = data_user.get(elem, key);
          if (data !== undefined) {
            return data;
          }
          data = data_user.get(elem, camelKey);
          if (data !== undefined) {
            return data;
          }
          data = dataAttr(elem, camelKey, undefined);
          if (data !== undefined) {
            return data;
          }
          return;
        }
        this.each(function () {
          var data = data_user.get(this, camelKey);
          data_user.set(this, camelKey, value);
          if (key.indexOf("-") !== -1 && data !== undefined) {
            data_user.set(this, key, value);
          }
        });
      }, null, value, arguments.length > 1, null, true);
    },
    removeData: function (key) {
      return this.each(function () {
        data_user.remove(this, key);
      });
    }
  });
  jQuery.extend({
    queue: function (elem, type, data) {
      var queue;
      if (elem) {
        type = (type || "fx") + "queue";
        queue = data_priv.get(elem, type);
        if (data) {
          if (!queue || jQuery.isArray(data)) {
            queue = data_priv.access(elem, type, jQuery.makeArray(data));
          } else {
            queue.push(data);
          }
        }
        return queue || [];
      }
    },
    dequeue: function (elem, type) {
      type = type || "fx";
      var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function () {
          jQuery.dequeue(elem, type);
        };
      if (fn === "inprogress") {
        fn = queue.shift();
        startLength--;
      }
      if (fn) {
        if (type === "fx") {
          queue.unshift("inprogress");
        }
        delete hooks.stop;
        fn.call(elem, next, hooks);
      }
      if (!startLength && hooks) {
        hooks.empty.fire();
      }
    },
    _queueHooks: function (elem, type) {
      var key = type + "queueHooks";
      return data_priv.get(elem, key) || data_priv.access(elem, key, {
        empty: jQuery.Callbacks("once memory").add(function () {
          data_priv.remove(elem, [
            type + "queue",
            key
          ]);
        })
      });
    }
  });
  jQuery.fn.extend({
    queue: function (type, data) {
      var setter = 2;
      if (typeof type !== "string") {
        data = type;
        type = "fx";
        setter--;
      }
      if (arguments.length < setter) {
        return jQuery.queue(this[0], type);
      }
      return data === undefined ? this : this.each(function () {
        var queue = jQuery.queue(this, type, data);
        jQuery._queueHooks(this, type);
        if (type === "fx" && queue[0] !== "inprogress") {
          jQuery.dequeue(this, type);
        }
      });
    },
    dequeue: function (type) {
      return this.each(function () {
        jQuery.dequeue(this, type);
      });
    },
    clearQueue: function (type) {
      return this.queue(type || "fx", []);
    },
    promise: function (type, obj) {
      var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function () {
          if (!--count) {
            defer.resolveWith(elements, [elements]);
          }
        };
      if (typeof type !== "string") {
        obj = type;
        type = undefined;
      }
      type = type || "fx";
      while (i--) {
        tmp = data_priv.get(elements[i], type + "queueHooks");
        if (tmp && tmp.empty) {
          count++;
          tmp.empty.add(resolve);
        }
      }
      resolve();
      return defer.promise(obj);
    }
  });
  var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
  var rcheckableType = /^(?:checkbox|radio)$/i;
  (function () {
    var fragment = document.createDocumentFragment(), div = fragment.appendChild(document.createElement("div")), input = document.createElement("input");
    input.setAttribute("type", "radio");
    input.setAttribute("checked", "checked");
    input.setAttribute("name", "t");
    div.appendChild(input);
    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
    div.innerHTML = "<textarea>x</textarea>";
    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
  }());
  var strundefined = typeof undefined;
  support.focusinBubbles = "onfocusin" in window;
  var rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/, rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;
  function returnTrue() {
    return true;
  }
  function returnFalse() {
    return false;
  }
  function safeActiveElement() {
    try {
      return document.activeElement;
    } catch (err) {
    }
  }
  jQuery.event = {
    global: {},
    add: function (elem, types, handler, data, selector) {
      var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = data_priv.get(elem);
      if (!elemData) {
        return;
      }
      if (handler.handler) {
        handleObjIn = handler;
        handler = handleObjIn.handler;
        selector = handleObjIn.selector;
      }
      if (!handler.guid) {
        handler.guid = jQuery.guid++;
      }
      if (!(events = elemData.events)) {
        events = elemData.events = {};
      }
      if (!(eventHandle = elemData.handle)) {
        eventHandle = elemData.handle = function (e) {
          return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
        };
      }
      types = (types || "").match(rnotwhite) || [""];
      t = types.length;
      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort();
        if (!type) {
          continue;
        }
        special = jQuery.event.special[type] || {};
        type = (selector ? special.delegateType : special.bindType) || type;
        special = jQuery.event.special[type] || {};
        handleObj = jQuery.extend({
          type: type,
          origType: origType,
          data: data,
          handler: handler,
          guid: handler.guid,
          selector: selector,
          needsContext: selector && jQuery.expr.match.needsContext.test(selector),
          namespace: namespaces.join(".")
        }, handleObjIn);
        if (!(handlers = events[type])) {
          handlers = events[type] = [];
          handlers.delegateCount = 0;
          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
            if (elem.addEventListener) {
              elem.addEventListener(type, eventHandle, false);
            }
          }
        }
        if (special.add) {
          special.add.call(elem, handleObj);
          if (!handleObj.handler.guid) {
            handleObj.handler.guid = handler.guid;
          }
        }
        if (selector) {
          handlers.splice(handlers.delegateCount++, 0, handleObj);
        } else {
          handlers.push(handleObj);
        }
        jQuery.event.global[type] = true;
      }
    },
    remove: function (elem, types, handler, selector, mappedTypes) {
      var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = data_priv.hasData(elem) && data_priv.get(elem);
      if (!elemData || !(events = elemData.events)) {
        return;
      }
      types = (types || "").match(rnotwhite) || [""];
      t = types.length;
      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort();
        if (!type) {
          for (type in events) {
            jQuery.event.remove(elem, type + types[t], handler, selector, true);
          }
          continue;
        }
        special = jQuery.event.special[type] || {};
        type = (selector ? special.delegateType : special.bindType) || type;
        handlers = events[type] || [];
        tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
        origCount = j = handlers.length;
        while (j--) {
          handleObj = handlers[j];
          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
            handlers.splice(j, 1);
            if (handleObj.selector) {
              handlers.delegateCount--;
            }
            if (special.remove) {
              special.remove.call(elem, handleObj);
            }
          }
        }
        if (origCount && !handlers.length) {
          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
            jQuery.removeEvent(elem, type, elemData.handle);
          }
          delete events[type];
        }
      }
      if (jQuery.isEmptyObject(events)) {
        delete elemData.handle;
        data_priv.remove(elem, "events");
      }
    },
    trigger: function (event, data, elem, onlyHandlers) {
      var i, cur, tmp, bubbleType, ontype, handle, special, eventPath = [elem || document], type = hasOwn.call(event, "type") ? event.type : event, namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
      cur = tmp = elem = elem || document;
      if (elem.nodeType === 3 || elem.nodeType === 8) {
        return;
      }
      if (rfocusMorph.test(type + jQuery.event.triggered)) {
        return;
      }
      if (type.indexOf(".") >= 0) {
        namespaces = type.split(".");
        type = namespaces.shift();
        namespaces.sort();
      }
      ontype = type.indexOf(":") < 0 && "on" + type;
      event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);
      event.isTrigger = onlyHandlers ? 2 : 3;
      event.namespace = namespaces.join(".");
      event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
      event.result = undefined;
      if (!event.target) {
        event.target = elem;
      }
      data = data == null ? [event] : jQuery.makeArray(data, [event]);
      special = jQuery.event.special[type] || {};
      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
        return;
      }
      if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
        bubbleType = special.delegateType || type;
        if (!rfocusMorph.test(bubbleType + type)) {
          cur = cur.parentNode;
        }
        for (; cur; cur = cur.parentNode) {
          eventPath.push(cur);
          tmp = cur;
        }
        if (tmp === (elem.ownerDocument || document)) {
          eventPath.push(tmp.defaultView || tmp.parentWindow || window);
        }
      }
      i = 0;
      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
        event.type = i > 1 ? bubbleType : special.bindType || type;
        handle = (data_priv.get(cur, "events") || {})[event.type] && data_priv.get(cur, "handle");
        if (handle) {
          handle.apply(cur, data);
        }
        handle = ontype && cur[ontype];
        if (handle && handle.apply && jQuery.acceptData(cur)) {
          event.result = handle.apply(cur, data);
          if (event.result === false) {
            event.preventDefault();
          }
        }
      }
      event.type = type;
      if (!onlyHandlers && !event.isDefaultPrevented()) {
        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {
          if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {
            tmp = elem[ontype];
            if (tmp) {
              elem[ontype] = null;
            }
            jQuery.event.triggered = type;
            elem[type]();
            jQuery.event.triggered = undefined;
            if (tmp) {
              elem[ontype] = tmp;
            }
          }
        }
      }
      return event.result;
    },
    dispatch: function (event) {
      event = jQuery.event.fix(event);
      var i, j, ret, matched, handleObj, handlerQueue = [], args = slice.call(arguments), handlers = (data_priv.get(this, "events") || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
      args[0] = event;
      event.delegateTarget = this;
      if (special.preDispatch && special.preDispatch.call(this, event) === false) {
        return;
      }
      handlerQueue = jQuery.event.handlers.call(this, event, handlers);
      i = 0;
      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
        event.currentTarget = matched.elem;
        j = 0;
        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
          if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
            event.handleObj = handleObj;
            event.data = handleObj.data;
            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
            if (ret !== undefined) {
              if ((event.result = ret) === false) {
                event.preventDefault();
                event.stopPropagation();
              }
            }
          }
        }
      }
      if (special.postDispatch) {
        special.postDispatch.call(this, event);
      }
      return event.result;
    },
    handlers: function (event, handlers) {
      var i, matches, sel, handleObj, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
      if (delegateCount && cur.nodeType && (!event.button || event.type !== "click")) {
        for (; cur !== this; cur = cur.parentNode || this) {
          if (cur.disabled !== true || event.type !== "click") {
            matches = [];
            for (i = 0; i < delegateCount; i++) {
              handleObj = handlers[i];
              sel = handleObj.selector + " ";
              if (matches[sel] === undefined) {
                matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length;
              }
              if (matches[sel]) {
                matches.push(handleObj);
              }
            }
            if (matches.length) {
              handlerQueue.push({
                elem: cur,
                handlers: matches
              });
            }
          }
        }
      }
      if (delegateCount < handlers.length) {
        handlerQueue.push({
          elem: this,
          handlers: handlers.slice(delegateCount)
        });
      }
      return handlerQueue;
    },
    props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
    fixHooks: {},
    keyHooks: {
      props: "char charCode key keyCode".split(" "),
      filter: function (event, original) {
        if (event.which == null) {
          event.which = original.charCode != null ? original.charCode : original.keyCode;
        }
        return event;
      }
    },
    mouseHooks: {
      props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
      filter: function (event, original) {
        var eventDoc, doc, body, button = original.button;
        if (event.pageX == null && original.clientX != null) {
          eventDoc = event.target.ownerDocument || document;
          doc = eventDoc.documentElement;
          body = eventDoc.body;
          event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
          event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
        }
        if (!event.which && button !== undefined) {
          event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
        }
        return event;
      }
    },
    fix: function (event) {
      if (event[jQuery.expando]) {
        return event;
      }
      var i, prop, copy, type = event.type, originalEvent = event, fixHook = this.fixHooks[type];
      if (!fixHook) {
        this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
      }
      copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
      event = new jQuery.Event(originalEvent);
      i = copy.length;
      while (i--) {
        prop = copy[i];
        event[prop] = originalEvent[prop];
      }
      if (!event.target) {
        event.target = document;
      }
      if (event.target.nodeType === 3) {
        event.target = event.target.parentNode;
      }
      return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
    },
    special: {
      load: { noBubble: true },
      focus: {
        trigger: function () {
          if (this !== safeActiveElement() && this.focus) {
            this.focus();
            return false;
          }
        },
        delegateType: "focusin"
      },
      blur: {
        trigger: function () {
          if (this === safeActiveElement() && this.blur) {
            this.blur();
            return false;
          }
        },
        delegateType: "focusout"
      },
      click: {
        trigger: function () {
          if (this.type === "checkbox" && this.click && jQuery.nodeName(this, "input")) {
            this.click();
            return false;
          }
        },
        _default: function (event) {
          return jQuery.nodeName(event.target, "a");
        }
      },
      beforeunload: {
        postDispatch: function (event) {
          if (event.result !== undefined && event.originalEvent) {
            event.originalEvent.returnValue = event.result;
          }
        }
      }
    },
    simulate: function (type, elem, event, bubble) {
      var e = jQuery.extend(new jQuery.Event(), event, {
        type: type,
        isSimulated: true,
        originalEvent: {}
      });
      if (bubble) {
        jQuery.event.trigger(e, null, elem);
      } else {
        jQuery.event.dispatch.call(elem, e);
      }
      if (e.isDefaultPrevented()) {
        event.preventDefault();
      }
    }
  };
  jQuery.removeEvent = function (elem, type, handle) {
    if (elem.removeEventListener) {
      elem.removeEventListener(type, handle, false);
    }
  };
  jQuery.Event = function (src, props) {
    if (!(this instanceof jQuery.Event)) {
      return new jQuery.Event(src, props);
    }
    if (src && src.type) {
      this.originalEvent = src;
      this.type = src.type;
      this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && src.returnValue === false ? returnTrue : returnFalse;
    } else {
      this.type = src;
    }
    if (props) {
      jQuery.extend(this, props);
    }
    this.timeStamp = src && src.timeStamp || jQuery.now();
    this[jQuery.expando] = true;
  };
  jQuery.Event.prototype = {
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse,
    preventDefault: function () {
      var e = this.originalEvent;
      this.isDefaultPrevented = returnTrue;
      if (e && e.preventDefault) {
        e.preventDefault();
      }
    },
    stopPropagation: function () {
      var e = this.originalEvent;
      this.isPropagationStopped = returnTrue;
      if (e && e.stopPropagation) {
        e.stopPropagation();
      }
    },
    stopImmediatePropagation: function () {
      var e = this.originalEvent;
      this.isImmediatePropagationStopped = returnTrue;
      if (e && e.stopImmediatePropagation) {
        e.stopImmediatePropagation();
      }
      this.stopPropagation();
    }
  };
  jQuery.each({
    mouseenter: "mouseover",
    mouseleave: "mouseout",
    pointerenter: "pointerover",
    pointerleave: "pointerout"
  }, function (orig, fix) {
    jQuery.event.special[orig] = {
      delegateType: fix,
      bindType: fix,
      handle: function (event) {
        var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
        if (!related || related !== target && !jQuery.contains(target, related)) {
          event.type = handleObj.origType;
          ret = handleObj.handler.apply(this, arguments);
          event.type = fix;
        }
        return ret;
      }
    };
  });
  if (!support.focusinBubbles) {
    jQuery.each({
      focus: "focusin",
      blur: "focusout"
    }, function (orig, fix) {
      var handler = function (event) {
        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
      };
      jQuery.event.special[fix] = {
        setup: function () {
          var doc = this.ownerDocument || this, attaches = data_priv.access(doc, fix);
          if (!attaches) {
            doc.addEventListener(orig, handler, true);
          }
          data_priv.access(doc, fix, (attaches || 0) + 1);
        },
        teardown: function () {
          var doc = this.ownerDocument || this, attaches = data_priv.access(doc, fix) - 1;
          if (!attaches) {
            doc.removeEventListener(orig, handler, true);
            data_priv.remove(doc, fix);
          } else {
            data_priv.access(doc, fix, attaches);
          }
        }
      };
    });
  }
  jQuery.fn.extend({
    on: function (types, selector, data, fn, one) {
      var origFn, type;
      if (typeof types === "object") {
        if (typeof selector !== "string") {
          data = data || selector;
          selector = undefined;
        }
        for (type in types) {
          this.on(type, selector, data, types[type], one);
        }
        return this;
      }
      if (data == null && fn == null) {
        fn = selector;
        data = selector = undefined;
      } else if (fn == null) {
        if (typeof selector === "string") {
          fn = data;
          data = undefined;
        } else {
          fn = data;
          data = selector;
          selector = undefined;
        }
      }
      if (fn === false) {
        fn = returnFalse;
      } else if (!fn) {
        return this;
      }
      if (one === 1) {
        origFn = fn;
        fn = function (event) {
          jQuery().off(event);
          return origFn.apply(this, arguments);
        };
        fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
      }
      return this.each(function () {
        jQuery.event.add(this, types, fn, data, selector);
      });
    },
    one: function (types, selector, data, fn) {
      return this.on(types, selector, data, fn, 1);
    },
    off: function (types, selector, fn) {
      var handleObj, type;
      if (types && types.preventDefault && types.handleObj) {
        handleObj = types.handleObj;
        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
        return this;
      }
      if (typeof types === "object") {
        for (type in types) {
          this.off(type, selector, types[type]);
        }
        return this;
      }
      if (selector === false || typeof selector === "function") {
        fn = selector;
        selector = undefined;
      }
      if (fn === false) {
        fn = returnFalse;
      }
      return this.each(function () {
        jQuery.event.remove(this, types, fn, selector);
      });
    },
    trigger: function (type, data) {
      return this.each(function () {
        jQuery.event.trigger(type, data, this);
      });
    },
    triggerHandler: function (type, data) {
      var elem = this[0];
      if (elem) {
        return jQuery.event.trigger(type, data, elem, true);
      }
    }
  });
  var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, rtagName = /<([\w:]+)/, rhtml = /<|&#?\w+;/, rnoInnerhtml = /<(?:script|style|link)/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptType = /^$|\/(?:java|ecma)script/i, rscriptTypeMasked = /^true\/(.*)/, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, wrapMap = {
      option: [
        1,
        "<select multiple='multiple'>",
        "</select>"
      ],
      thead: [
        1,
        "<table>",
        "</table>"
      ],
      col: [
        2,
        "<table><colgroup>",
        "</colgroup></table>"
      ],
      tr: [
        2,
        "<table><tbody>",
        "</tbody></table>"
      ],
      td: [
        3,
        "<table><tbody><tr>",
        "</tr></tbody></table>"
      ],
      _default: [
        0,
        "",
        ""
      ]
    };
  wrapMap.optgroup = wrapMap.option;
  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  wrapMap.th = wrapMap.td;
  function manipulationTarget(elem, content) {
    return jQuery.nodeName(elem, "table") && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
  }
  function disableScript(elem) {
    elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
    return elem;
  }
  function restoreScript(elem) {
    var match = rscriptTypeMasked.exec(elem.type);
    if (match) {
      elem.type = match[1];
    } else {
      elem.removeAttribute("type");
    }
    return elem;
  }
  function setGlobalEval(elems, refElements) {
    var i = 0, l = elems.length;
    for (; i < l; i++) {
      data_priv.set(elems[i], "globalEval", !refElements || data_priv.get(refElements[i], "globalEval"));
    }
  }
  function cloneCopyEvent(src, dest) {
    var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
    if (dest.nodeType !== 1) {
      return;
    }
    if (data_priv.hasData(src)) {
      pdataOld = data_priv.access(src);
      pdataCur = data_priv.set(dest, pdataOld);
      events = pdataOld.events;
      if (events) {
        delete pdataCur.handle;
        pdataCur.events = {};
        for (type in events) {
          for (i = 0, l = events[type].length; i < l; i++) {
            jQuery.event.add(dest, type, events[type][i]);
          }
        }
      }
    }
    if (data_user.hasData(src)) {
      udataOld = data_user.access(src);
      udataCur = jQuery.extend({}, udataOld);
      data_user.set(dest, udataCur);
    }
  }
  function getAll(context, tag) {
    var ret = context.getElementsByTagName ? context.getElementsByTagName(tag || "*") : context.querySelectorAll ? context.querySelectorAll(tag || "*") : [];
    return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret;
  }
  function fixInput(src, dest) {
    var nodeName = dest.nodeName.toLowerCase();
    if (nodeName === "input" && rcheckableType.test(src.type)) {
      dest.checked = src.checked;
    } else if (nodeName === "input" || nodeName === "textarea") {
      dest.defaultValue = src.defaultValue;
    }
  }
  jQuery.extend({
    clone: function (elem, dataAndEvents, deepDataAndEvents) {
      var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = jQuery.contains(elem.ownerDocument, elem);
      if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
        destElements = getAll(clone);
        srcElements = getAll(elem);
        for (i = 0, l = srcElements.length; i < l; i++) {
          fixInput(srcElements[i], destElements[i]);
        }
      }
      if (dataAndEvents) {
        if (deepDataAndEvents) {
          srcElements = srcElements || getAll(elem);
          destElements = destElements || getAll(clone);
          for (i = 0, l = srcElements.length; i < l; i++) {
            cloneCopyEvent(srcElements[i], destElements[i]);
          }
        } else {
          cloneCopyEvent(elem, clone);
        }
      }
      destElements = getAll(clone, "script");
      if (destElements.length > 0) {
        setGlobalEval(destElements, !inPage && getAll(elem, "script"));
      }
      return clone;
    },
    buildFragment: function (elems, context, scripts, selection) {
      var elem, tmp, tag, wrap, contains, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;
      for (; i < l; i++) {
        elem = elems[i];
        if (elem || elem === 0) {
          if (jQuery.type(elem) === "object") {
            jQuery.merge(nodes, elem.nodeType ? [elem] : elem);
          } else if (!rhtml.test(elem)) {
            nodes.push(context.createTextNode(elem));
          } else {
            tmp = tmp || fragment.appendChild(context.createElement("div"));
            tag = (rtagName.exec(elem) || [
              "",
              ""
            ])[1].toLowerCase();
            wrap = wrapMap[tag] || wrapMap._default;
            tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];
            j = wrap[0];
            while (j--) {
              tmp = tmp.lastChild;
            }
            jQuery.merge(nodes, tmp.childNodes);
            tmp = fragment.firstChild;
            tmp.textContent = "";
          }
        }
      }
      fragment.textContent = "";
      i = 0;
      while (elem = nodes[i++]) {
        if (selection && jQuery.inArray(elem, selection) !== -1) {
          continue;
        }
        contains = jQuery.contains(elem.ownerDocument, elem);
        tmp = getAll(fragment.appendChild(elem), "script");
        if (contains) {
          setGlobalEval(tmp);
        }
        if (scripts) {
          j = 0;
          while (elem = tmp[j++]) {
            if (rscriptType.test(elem.type || "")) {
              scripts.push(elem);
            }
          }
        }
      }
      return fragment;
    },
    cleanData: function (elems) {
      var data, elem, type, key, special = jQuery.event.special, i = 0;
      for (; (elem = elems[i]) !== undefined; i++) {
        if (jQuery.acceptData(elem)) {
          key = elem[data_priv.expando];
          if (key && (data = data_priv.cache[key])) {
            if (data.events) {
              for (type in data.events) {
                if (special[type]) {
                  jQuery.event.remove(elem, type);
                } else {
                  jQuery.removeEvent(elem, type, data.handle);
                }
              }
            }
            if (data_priv.cache[key]) {
              delete data_priv.cache[key];
            }
          }
        }
        delete data_user.cache[elem[data_user.expando]];
      }
    }
  });
  jQuery.fn.extend({
    text: function (value) {
      return access(this, function (value) {
        return value === undefined ? jQuery.text(this) : this.empty().each(function () {
          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
            this.textContent = value;
          }
        });
      }, null, value, arguments.length);
    },
    append: function () {
      return this.domManip(arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.appendChild(elem);
        }
      });
    },
    prepend: function () {
      return this.domManip(arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.insertBefore(elem, target.firstChild);
        }
      });
    },
    before: function () {
      return this.domManip(arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this);
        }
      });
    },
    after: function () {
      return this.domManip(arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this.nextSibling);
        }
      });
    },
    remove: function (selector, keepData) {
      var elem, elems = selector ? jQuery.filter(selector, this) : this, i = 0;
      for (; (elem = elems[i]) != null; i++) {
        if (!keepData && elem.nodeType === 1) {
          jQuery.cleanData(getAll(elem));
        }
        if (elem.parentNode) {
          if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
            setGlobalEval(getAll(elem, "script"));
          }
          elem.parentNode.removeChild(elem);
        }
      }
      return this;
    },
    empty: function () {
      var elem, i = 0;
      for (; (elem = this[i]) != null; i++) {
        if (elem.nodeType === 1) {
          jQuery.cleanData(getAll(elem, false));
          elem.textContent = "";
        }
      }
      return this;
    },
    clone: function (dataAndEvents, deepDataAndEvents) {
      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
      return this.map(function () {
        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
      });
    },
    html: function (value) {
      return access(this, function (value) {
        var elem = this[0] || {}, i = 0, l = this.length;
        if (value === undefined && elem.nodeType === 1) {
          return elem.innerHTML;
        }
        if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [
            "",
            ""
          ])[1].toLowerCase()]) {
          value = value.replace(rxhtmlTag, "<$1></$2>");
          try {
            for (; i < l; i++) {
              elem = this[i] || {};
              if (elem.nodeType === 1) {
                jQuery.cleanData(getAll(elem, false));
                elem.innerHTML = value;
              }
            }
            elem = 0;
          } catch (e) {
          }
        }
        if (elem) {
          this.empty().append(value);
        }
      }, null, value, arguments.length);
    },
    replaceWith: function () {
      var arg = arguments[0];
      this.domManip(arguments, function (elem) {
        arg = this.parentNode;
        jQuery.cleanData(getAll(this));
        if (arg) {
          arg.replaceChild(elem, this);
        }
      });
      return arg && (arg.length || arg.nodeType) ? this : this.remove();
    },
    detach: function (selector) {
      return this.remove(selector, true);
    },
    domManip: function (args, callback) {
      args = concat.apply([], args);
      var fragment, first, scripts, hasScripts, node, doc, i = 0, l = this.length, set = this, iNoClone = l - 1, value = args[0], isFunction = jQuery.isFunction(value);
      if (isFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
        return this.each(function (index) {
          var self = set.eq(index);
          if (isFunction) {
            args[0] = value.call(this, index, self.html());
          }
          self.domManip(args, callback);
        });
      }
      if (l) {
        fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);
        first = fragment.firstChild;
        if (fragment.childNodes.length === 1) {
          fragment = first;
        }
        if (first) {
          scripts = jQuery.map(getAll(fragment, "script"), disableScript);
          hasScripts = scripts.length;
          for (; i < l; i++) {
            node = fragment;
            if (i !== iNoClone) {
              node = jQuery.clone(node, true, true);
              if (hasScripts) {
                jQuery.merge(scripts, getAll(node, "script"));
              }
            }
            callback.call(this[i], node, i);
          }
          if (hasScripts) {
            doc = scripts[scripts.length - 1].ownerDocument;
            jQuery.map(scripts, restoreScript);
            for (i = 0; i < hasScripts; i++) {
              node = scripts[i];
              if (rscriptType.test(node.type || "") && !data_priv.access(node, "globalEval") && jQuery.contains(doc, node)) {
                if (node.src) {
                  if (jQuery._evalUrl) {
                    jQuery._evalUrl(node.src);
                  }
                } else {
                  jQuery.globalEval(node.textContent.replace(rcleanScript, ""));
                }
              }
            }
          }
        }
      }
      return this;
    }
  });
  jQuery.each({
    appendTo: "append",
    prependTo: "prepend",
    insertBefore: "before",
    insertAfter: "after",
    replaceAll: "replaceWith"
  }, function (name, original) {
    jQuery.fn[name] = function (selector) {
      var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;
      for (; i <= last; i++) {
        elems = i === last ? this : this.clone(true);
        jQuery(insert[i])[original](elems);
        push.apply(ret, elems.get());
      }
      return this.pushStack(ret);
    };
  });
  jQuery.fn.delay = function (time, type) {
    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
    type = type || "fx";
    return this.queue(type, function (next, hooks) {
      var timeout = setTimeout(next, time);
      hooks.stop = function () {
        clearTimeout(timeout);
      };
    });
  };
  (function () {
    var input = document.createElement("input"), select = document.createElement("select"), opt = select.appendChild(document.createElement("option"));
    input.type = "checkbox";
    support.checkOn = input.value !== "";
    support.optSelected = opt.selected;
    select.disabled = true;
    support.optDisabled = !opt.disabled;
    input = document.createElement("input");
    input.value = "t";
    input.type = "radio";
    support.radioValue = input.value === "t";
  }());
  var nodeHook, boolHook, attrHandle = jQuery.expr.attrHandle;
  jQuery.fn.extend({
    attr: function (name, value) {
      return access(this, jQuery.attr, name, value, arguments.length > 1);
    },
    removeAttr: function (name) {
      return this.each(function () {
        jQuery.removeAttr(this, name);
      });
    }
  });
  jQuery.extend({
    attr: function (elem, name, value) {
      var hooks, ret, nType = elem.nodeType;
      if (!elem || nType === 3 || nType === 8 || nType === 2) {
        return;
      }
      if (typeof elem.getAttribute === strundefined) {
        return jQuery.prop(elem, name, value);
      }
      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        name = name.toLowerCase();
        hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
      }
      if (value !== undefined) {
        if (value === null) {
          jQuery.removeAttr(elem, name);
        } else if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        } else {
          elem.setAttribute(name, value + "");
          return value;
        }
      } else if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      } else {
        ret = jQuery.find.attr(elem, name);
        return ret == null ? undefined : ret;
      }
    },
    removeAttr: function (elem, value) {
      var name, propName, i = 0, attrNames = value && value.match(rnotwhite);
      if (attrNames && elem.nodeType === 1) {
        while (name = attrNames[i++]) {
          propName = jQuery.propFix[name] || name;
          if (jQuery.expr.match.bool.test(name)) {
            elem[propName] = false;
          }
          elem.removeAttribute(name);
        }
      }
    },
    attrHooks: {
      type: {
        set: function (elem, value) {
          if (!support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
            var val = elem.value;
            elem.setAttribute("type", value);
            if (val) {
              elem.value = val;
            }
            return value;
          }
        }
      }
    }
  });
  boolHook = {
    set: function (elem, value, name) {
      if (value === false) {
        jQuery.removeAttr(elem, name);
      } else {
        elem.setAttribute(name, name);
      }
      return name;
    }
  };
  jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
    var getter = attrHandle[name] || jQuery.find.attr;
    attrHandle[name] = function (elem, name, isXML) {
      var ret, handle;
      if (!isXML) {
        handle = attrHandle[name];
        attrHandle[name] = ret;
        ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
        attrHandle[name] = handle;
      }
      return ret;
    };
  });
  var rfocusable = /^(?:input|select|textarea|button)$/i;
  jQuery.fn.extend({
    prop: function (name, value) {
      return access(this, jQuery.prop, name, value, arguments.length > 1);
    },
    removeProp: function (name) {
      return this.each(function () {
        delete this[jQuery.propFix[name] || name];
      });
    }
  });
  jQuery.extend({
    propFix: {
      "for": "htmlFor",
      "class": "className"
    },
    prop: function (elem, name, value) {
      var ret, hooks, notxml, nType = elem.nodeType;
      if (!elem || nType === 3 || nType === 8 || nType === 2) {
        return;
      }
      notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
      if (notxml) {
        name = jQuery.propFix[name] || name;
        hooks = jQuery.propHooks[name];
      }
      if (value !== undefined) {
        return hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : elem[name] = value;
      } else {
        return hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name];
      }
    },
    propHooks: {
      tabIndex: {
        get: function (elem) {
          return elem.hasAttribute("tabindex") || rfocusable.test(elem.nodeName) || elem.href ? elem.tabIndex : -1;
        }
      }
    }
  });
  if (!support.optSelected) {
    jQuery.propHooks.selected = {
      get: function (elem) {
        var parent = elem.parentNode;
        if (parent && parent.parentNode) {
          parent.parentNode.selectedIndex;
        }
        return null;
      }
    };
  }
  jQuery.each([
    "tabIndex",
    "readOnly",
    "maxLength",
    "cellSpacing",
    "cellPadding",
    "rowSpan",
    "colSpan",
    "useMap",
    "frameBorder",
    "contentEditable"
  ], function () {
    jQuery.propFix[this.toLowerCase()] = this;
  });
  var rclass = /[\t\r\n\f]/g;
  jQuery.fn.extend({
    addClass: function (value) {
      var classes, elem, cur, clazz, j, finalValue, proceed = typeof value === "string" && value, i = 0, len = this.length;
      if (jQuery.isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).addClass(value.call(this, j, this.className));
        });
      }
      if (proceed) {
        classes = (value || "").match(rnotwhite) || [];
        for (; i < len; i++) {
          elem = this[i];
          cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : " ");
          if (cur) {
            j = 0;
            while (clazz = classes[j++]) {
              if (cur.indexOf(" " + clazz + " ") < 0) {
                cur += clazz + " ";
              }
            }
            finalValue = jQuery.trim(cur);
            if (elem.className !== finalValue) {
              elem.className = finalValue;
            }
          }
        }
      }
      return this;
    },
    removeClass: function (value) {
      var classes, elem, cur, clazz, j, finalValue, proceed = arguments.length === 0 || typeof value === "string" && value, i = 0, len = this.length;
      if (jQuery.isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).removeClass(value.call(this, j, this.className));
        });
      }
      if (proceed) {
        classes = (value || "").match(rnotwhite) || [];
        for (; i < len; i++) {
          elem = this[i];
          cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "");
          if (cur) {
            j = 0;
            while (clazz = classes[j++]) {
              while (cur.indexOf(" " + clazz + " ") >= 0) {
                cur = cur.replace(" " + clazz + " ", " ");
              }
            }
            finalValue = value ? jQuery.trim(cur) : "";
            if (elem.className !== finalValue) {
              elem.className = finalValue;
            }
          }
        }
      }
      return this;
    },
    toggleClass: function (value, stateVal) {
      var type = typeof value;
      if (typeof stateVal === "boolean" && type === "string") {
        return stateVal ? this.addClass(value) : this.removeClass(value);
      }
      if (jQuery.isFunction(value)) {
        return this.each(function (i) {
          jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
        });
      }
      return this.each(function () {
        if (type === "string") {
          var className, i = 0, self = jQuery(this), classNames = value.match(rnotwhite) || [];
          while (className = classNames[i++]) {
            if (self.hasClass(className)) {
              self.removeClass(className);
            } else {
              self.addClass(className);
            }
          }
        } else if (type === strundefined || type === "boolean") {
          if (this.className) {
            data_priv.set(this, "__className__", this.className);
          }
          this.className = this.className || value === false ? "" : data_priv.get(this, "__className__") || "";
        }
      });
    },
    hasClass: function (selector) {
      var className = " " + selector + " ", i = 0, l = this.length;
      for (; i < l; i++) {
        if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) {
          return true;
        }
      }
      return false;
    }
  });
  var rreturn = /\r/g;
  jQuery.fn.extend({
    val: function (value) {
      var hooks, ret, isFunction, elem = this[0];
      if (!arguments.length) {
        if (elem) {
          hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
          if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
            return ret;
          }
          ret = elem.value;
          return typeof ret === "string" ? ret.replace(rreturn, "") : ret == null ? "" : ret;
        }
        return;
      }
      isFunction = jQuery.isFunction(value);
      return this.each(function (i) {
        var val;
        if (this.nodeType !== 1) {
          return;
        }
        if (isFunction) {
          val = value.call(this, i, jQuery(this).val());
        } else {
          val = value;
        }
        if (val == null) {
          val = "";
        } else if (typeof val === "number") {
          val += "";
        } else if (jQuery.isArray(val)) {
          val = jQuery.map(val, function (value) {
            return value == null ? "" : value + "";
          });
        }
        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
        if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
          this.value = val;
        }
      });
    }
  });
  jQuery.extend({
    valHooks: {
      option: {
        get: function (elem) {
          var val = jQuery.find.attr(elem, "value");
          return val != null ? val : jQuery.trim(jQuery.text(elem));
        }
      },
      select: {
        get: function (elem) {
          var value, option, options = elem.options, index = elem.selectedIndex, one = elem.type === "select-one" || index < 0, values = one ? null : [], max = one ? index + 1 : options.length, i = index < 0 ? max : one ? index : 0;
          for (; i < max; i++) {
            option = options[i];
            if ((option.selected || i === index) && (support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
              value = jQuery(option).val();
              if (one) {
                return value;
              }
              values.push(value);
            }
          }
          return values;
        },
        set: function (elem, value) {
          var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
          while (i--) {
            option = options[i];
            if (option.selected = jQuery.inArray(option.value, values) >= 0) {
              optionSet = true;
            }
          }
          if (!optionSet) {
            elem.selectedIndex = -1;
          }
          return values;
        }
      }
    }
  });
  jQuery.each([
    "radio",
    "checkbox"
  ], function () {
    jQuery.valHooks[this] = {
      set: function (elem, value) {
        if (jQuery.isArray(value)) {
          return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;
        }
      }
    };
    if (!support.checkOn) {
      jQuery.valHooks[this].get = function (elem) {
        return elem.getAttribute("value") === null ? "on" : elem.value;
      };
    }
  });
  jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function (i, name) {
    jQuery.fn[name] = function (data, fn) {
      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
    };
  });
  jQuery.fn.extend({
    hover: function (fnOver, fnOut) {
      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
    },
    bind: function (types, data, fn) {
      return this.on(types, null, data, fn);
    },
    unbind: function (types, fn) {
      return this.off(types, null, fn);
    },
    delegate: function (selector, types, data, fn) {
      return this.on(types, selector, data, fn);
    },
    undelegate: function (selector, types, fn) {
      return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
    }
  });
  var nonce = jQuery.now();
  var rquery = /\?/;
  jQuery.parseJSON = function (data) {
    return JSON.parse(data + "");
  };
  jQuery.parseXML = function (data) {
    var xml, tmp;
    if (!data || typeof data !== "string") {
      return null;
    }
    try {
      tmp = new DOMParser();
      xml = tmp.parseFromString(data, "text/xml");
    } catch (e) {
      xml = undefined;
    }
    if (!xml || xml.getElementsByTagName("parsererror").length) {
      jQuery.error("Invalid XML: " + data);
    }
    return xml;
  };
  var ajaxLocParts, ajaxLocation, rhash = /#.*$/, rts = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/, prefilters = {}, transports = {}, allTypes = "*/".concat("*");
  try {
    ajaxLocation = location.href;
  } catch (e) {
    ajaxLocation = document.createElement("a");
    ajaxLocation.href = "";
    ajaxLocation = ajaxLocation.href;
  }
  ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];
  function addToPrefiltersOrTransports(structure) {
    return function (dataTypeExpression, func) {
      if (typeof dataTypeExpression !== "string") {
        func = dataTypeExpression;
        dataTypeExpression = "*";
      }
      var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];
      if (jQuery.isFunction(func)) {
        while (dataType = dataTypes[i++]) {
          if (dataType[0] === "+") {
            dataType = dataType.slice(1) || "*";
            (structure[dataType] = structure[dataType] || []).unshift(func);
          } else {
            (structure[dataType] = structure[dataType] || []).push(func);
          }
        }
      }
    };
  }
  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
    var inspected = {}, seekingTransport = structure === transports;
    function inspect(dataType) {
      var selected;
      inspected[dataType] = true;
      jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
        if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
          options.dataTypes.unshift(dataTypeOrTransport);
          inspect(dataTypeOrTransport);
          return false;
        } else if (seekingTransport) {
          return !(selected = dataTypeOrTransport);
        }
      });
      return selected;
    }
    return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
  }
  function ajaxExtend(target, src) {
    var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
    for (key in src) {
      if (src[key] !== undefined) {
        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
      }
    }
    if (deep) {
      jQuery.extend(true, target, deep);
    }
    return target;
  }
  function ajaxHandleResponses(s, jqXHR, responses) {
    var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
    while (dataTypes[0] === "*") {
      dataTypes.shift();
      if (ct === undefined) {
        ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
      }
    }
    if (ct) {
      for (type in contents) {
        if (contents[type] && contents[type].test(ct)) {
          dataTypes.unshift(type);
          break;
        }
      }
    }
    if (dataTypes[0] in responses) {
      finalDataType = dataTypes[0];
    } else {
      for (type in responses) {
        if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
          finalDataType = type;
          break;
        }
        if (!firstDataType) {
          firstDataType = type;
        }
      }
      finalDataType = finalDataType || firstDataType;
    }
    if (finalDataType) {
      if (finalDataType !== dataTypes[0]) {
        dataTypes.unshift(finalDataType);
      }
      return responses[finalDataType];
    }
  }
  function ajaxConvert(s, response, jqXHR, isSuccess) {
    var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
    if (dataTypes[1]) {
      for (conv in s.converters) {
        converters[conv.toLowerCase()] = s.converters[conv];
      }
    }
    current = dataTypes.shift();
    while (current) {
      if (s.responseFields[current]) {
        jqXHR[s.responseFields[current]] = response;
      }
      if (!prev && isSuccess && s.dataFilter) {
        response = s.dataFilter(response, s.dataType);
      }
      prev = current;
      current = dataTypes.shift();
      if (current) {
        if (current === "*") {
          current = prev;
        } else if (prev !== "*" && prev !== current) {
          conv = converters[prev + " " + current] || converters["* " + current];
          if (!conv) {
            for (conv2 in converters) {
              tmp = conv2.split(" ");
              if (tmp[1] === current) {
                conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                if (conv) {
                  if (conv === true) {
                    conv = converters[conv2];
                  } else if (converters[conv2] !== true) {
                    current = tmp[0];
                    dataTypes.unshift(tmp[1]);
                  }
                  break;
                }
              }
            }
          }
          if (conv !== true) {
            if (conv && s["throws"]) {
              response = conv(response);
            } else {
              try {
                response = conv(response);
              } catch (e) {
                return {
                  state: "parsererror",
                  error: conv ? e : "No conversion from " + prev + " to " + current
                };
              }
            }
          }
        }
      }
    }
    return {
      state: "success",
      data: response
    };
  }
  jQuery.extend({
    active: 0,
    lastModified: {},
    etag: {},
    ajaxSettings: {
      url: ajaxLocation,
      type: "GET",
      isLocal: rlocalProtocol.test(ajaxLocParts[1]),
      global: true,
      processData: true,
      async: true,
      contentType: "application/x-www-form-urlencoded; charset=UTF-8",
      accepts: {
        "*": allTypes,
        text: "text/plain",
        html: "text/html",
        xml: "application/xml, text/xml",
        json: "application/json, text/javascript"
      },
      contents: {
        xml: /xml/,
        html: /html/,
        json: /json/
      },
      responseFields: {
        xml: "responseXML",
        text: "responseText",
        json: "responseJSON"
      },
      converters: {
        "* text": String,
        "text html": true,
        "text json": jQuery.parseJSON,
        "text xml": jQuery.parseXML
      },
      flatOptions: {
        url: true,
        context: true
      }
    },
    ajaxSetup: function (target, settings) {
      return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
    },
    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
    ajaxTransport: addToPrefiltersOrTransports(transports),
    ajax: function (url, options) {
      if (typeof url === "object") {
        options = url;
        url = undefined;
      }
      options = options || {};
      var transport, cacheURL, responseHeadersString, responseHeaders, timeoutTimer, parts, fireGlobals, i, s = jQuery.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks("once memory"), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, state = 0, strAbort = "canceled", jqXHR = {
          readyState: 0,
          getResponseHeader: function (key) {
            var match;
            if (state === 2) {
              if (!responseHeaders) {
                responseHeaders = {};
                while (match = rheaders.exec(responseHeadersString)) {
                  responseHeaders[match[1].toLowerCase()] = match[2];
                }
              }
              match = responseHeaders[key.toLowerCase()];
            }
            return match == null ? null : match;
          },
          getAllResponseHeaders: function () {
            return state === 2 ? responseHeadersString : null;
          },
          setRequestHeader: function (name, value) {
            var lname = name.toLowerCase();
            if (!state) {
              name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
              requestHeaders[name] = value;
            }
            return this;
          },
          overrideMimeType: function (type) {
            if (!state) {
              s.mimeType = type;
            }
            return this;
          },
          statusCode: function (map) {
            var code;
            if (map) {
              if (state < 2) {
                for (code in map) {
                  statusCode[code] = [
                    statusCode[code],
                    map[code]
                  ];
                }
              } else {
                jqXHR.always(map[jqXHR.status]);
              }
            }
            return this;
          },
          abort: function (statusText) {
            var finalText = statusText || strAbort;
            if (transport) {
              transport.abort(finalText);
            }
            done(0, finalText);
            return this;
          }
        };
      deferred.promise(jqXHR).complete = completeDeferred.add;
      jqXHR.success = jqXHR.done;
      jqXHR.error = jqXHR.fail;
      s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");
      s.type = options.method || options.type || s.method || s.type;
      s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""];
      if (s.crossDomain == null) {
        parts = rurl.exec(s.url.toLowerCase());
        s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? "80" : "443")) !== (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? "80" : "443"))));
      }
      if (s.data && s.processData && typeof s.data !== "string") {
        s.data = jQuery.param(s.data, s.traditional);
      }
      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
      if (state === 2) {
        return jqXHR;
      }
      fireGlobals = s.global;
      if (fireGlobals && jQuery.active++ === 0) {
        jQuery.event.trigger("ajaxStart");
      }
      s.type = s.type.toUpperCase();
      s.hasContent = !rnoContent.test(s.type);
      cacheURL = s.url;
      if (!s.hasContent) {
        if (s.data) {
          cacheURL = s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data;
          delete s.data;
        }
        if (s.cache === false) {
          s.url = rts.test(cacheURL) ? cacheURL.replace(rts, "$1_=" + nonce++) : cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++;
        }
      }
      if (s.ifModified) {
        if (jQuery.lastModified[cacheURL]) {
          jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
        }
        if (jQuery.etag[cacheURL]) {
          jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
        }
      }
      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
        jqXHR.setRequestHeader("Content-Type", s.contentType);
      }
      jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
      for (i in s.headers) {
        jqXHR.setRequestHeader(i, s.headers[i]);
      }
      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
        return jqXHR.abort();
      }
      strAbort = "abort";
      for (i in {
          success: 1,
          error: 1,
          complete: 1
        }) {
        jqXHR[i](s[i]);
      }
      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
      if (!transport) {
        done(-1, "No Transport");
      } else {
        jqXHR.readyState = 1;
        if (fireGlobals) {
          globalEventContext.trigger("ajaxSend", [
            jqXHR,
            s
          ]);
        }
        if (s.async && s.timeout > 0) {
          timeoutTimer = setTimeout(function () {
            jqXHR.abort("timeout");
          }, s.timeout);
        }
        try {
          state = 1;
          transport.send(requestHeaders, done);
        } catch (e) {
          if (state < 2) {
            done(-1, e);
          } else {
            throw e;
          }
        }
      }
      function done(status, nativeStatusText, responses, headers) {
        var isSuccess, success, error, response, modified, statusText = nativeStatusText;
        if (state === 2) {
          return;
        }
        state = 2;
        if (timeoutTimer) {
          clearTimeout(timeoutTimer);
        }
        transport = undefined;
        responseHeadersString = headers || "";
        jqXHR.readyState = status > 0 ? 4 : 0;
        isSuccess = status >= 200 && status < 300 || status === 304;
        if (responses) {
          response = ajaxHandleResponses(s, jqXHR, responses);
        }
        response = ajaxConvert(s, response, jqXHR, isSuccess);
        if (isSuccess) {
          if (s.ifModified) {
            modified = jqXHR.getResponseHeader("Last-Modified");
            if (modified) {
              jQuery.lastModified[cacheURL] = modified;
            }
            modified = jqXHR.getResponseHeader("etag");
            if (modified) {
              jQuery.etag[cacheURL] = modified;
            }
          }
          if (status === 204 || s.type === "HEAD") {
            statusText = "nocontent";
          } else if (status === 304) {
            statusText = "notmodified";
          } else {
            statusText = response.state;
            success = response.data;
            error = response.error;
            isSuccess = !error;
          }
        } else {
          error = statusText;
          if (status || !statusText) {
            statusText = "error";
            if (status < 0) {
              status = 0;
            }
          }
        }
        jqXHR.status = status;
        jqXHR.statusText = (nativeStatusText || statusText) + "";
        if (isSuccess) {
          deferred.resolveWith(callbackContext, [
            success,
            statusText,
            jqXHR
          ]);
        } else {
          deferred.rejectWith(callbackContext, [
            jqXHR,
            statusText,
            error
          ]);
        }
        jqXHR.statusCode(statusCode);
        statusCode = undefined;
        if (fireGlobals) {
          globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [
            jqXHR,
            s,
            isSuccess ? success : error
          ]);
        }
        completeDeferred.fireWith(callbackContext, [
          jqXHR,
          statusText
        ]);
        if (fireGlobals) {
          globalEventContext.trigger("ajaxComplete", [
            jqXHR,
            s
          ]);
          if (!--jQuery.active) {
            jQuery.event.trigger("ajaxStop");
          }
        }
      }
      return jqXHR;
    },
    getJSON: function (url, data, callback) {
      return jQuery.get(url, data, callback, "json");
    },
    getScript: function (url, callback) {
      return jQuery.get(url, undefined, callback, "script");
    }
  });
  jQuery.each([
    "get",
    "post"
  ], function (i, method) {
    jQuery[method] = function (url, data, callback, type) {
      if (jQuery.isFunction(data)) {
        type = type || callback;
        callback = data;
        data = undefined;
      }
      return jQuery.ajax({
        url: url,
        type: method,
        dataType: type,
        data: data,
        success: callback
      });
    };
  });
  jQuery.each([
    "ajaxStart",
    "ajaxStop",
    "ajaxComplete",
    "ajaxError",
    "ajaxSuccess",
    "ajaxSend"
  ], function (i, type) {
    jQuery.fn[type] = function (fn) {
      return this.on(type, fn);
    };
  });
  jQuery._evalUrl = function (url) {
    return jQuery.ajax({
      url: url,
      type: "GET",
      dataType: "script",
      async: false,
      global: false,
      "throws": true
    });
  };
  var r20 = /%20/g, rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
  function buildParams(prefix, obj, traditional, add) {
    var name;
    if (jQuery.isArray(obj)) {
      jQuery.each(obj, function (i, v) {
        if (traditional || rbracket.test(prefix)) {
          add(prefix, v);
        } else {
          buildParams(prefix + "[" + (typeof v === "object" ? i : "") + "]", v, traditional, add);
        }
      });
    } else if (!traditional && jQuery.type(obj) === "object") {
      for (name in obj) {
        buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
      }
    } else {
      add(prefix, obj);
    }
  }
  jQuery.param = function (a, traditional) {
    var prefix, s = [], add = function (key, value) {
        value = jQuery.isFunction(value) ? value() : value == null ? "" : value;
        s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
      };
    if (traditional === undefined) {
      traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
    }
    if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
      jQuery.each(a, function () {
        add(this.name, this.value);
      });
    } else {
      for (prefix in a) {
        buildParams(prefix, a[prefix], traditional, add);
      }
    }
    return s.join("&").replace(r20, "+");
  };
  jQuery.fn.extend({
    serialize: function () {
      return jQuery.param(this.serializeArray());
    },
    serializeArray: function () {
      return this.map(function () {
        var elements = jQuery.prop(this, "elements");
        return elements ? jQuery.makeArray(elements) : this;
      }).filter(function () {
        var type = this.type;
        return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
      }).map(function (i, elem) {
        var val = jQuery(this).val();
        return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {
          return {
            name: elem.name,
            value: val.replace(rCRLF, "\r\n")
          };
        }) : {
          name: elem.name,
          value: val.replace(rCRLF, "\r\n")
        };
      }).get();
    }
  });
  jQuery.ajaxSettings.xhr = function () {
    try {
      return new XMLHttpRequest();
    } catch (e) {
    }
  };
  var xhrId = 0, xhrCallbacks = {}, xhrSuccessStatus = {
      0: 200,
      1223: 204
    }, xhrSupported = jQuery.ajaxSettings.xhr();
  if (window.ActiveXObject) {
    jQuery(window).on("unload", function () {
      for (var key in xhrCallbacks) {
        xhrCallbacks[key]();
      }
    });
  }
  support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
  support.ajax = xhrSupported = !!xhrSupported;
  jQuery.ajaxTransport(function (options) {
    var callback;
    if (support.cors || xhrSupported && !options.crossDomain) {
      return {
        send: function (headers, complete) {
          var i, xhr = options.xhr(), id = ++xhrId;
          xhr.open(options.type, options.url, options.async, options.username, options.password);
          if (options.xhrFields) {
            for (i in options.xhrFields) {
              xhr[i] = options.xhrFields[i];
            }
          }
          if (options.mimeType && xhr.overrideMimeType) {
            xhr.overrideMimeType(options.mimeType);
          }
          if (!options.crossDomain && !headers["X-Requested-With"]) {
            headers["X-Requested-With"] = "XMLHttpRequest";
          }
          for (i in headers) {
            xhr.setRequestHeader(i, headers[i]);
          }
          callback = function (type) {
            return function () {
              if (callback) {
                delete xhrCallbacks[id];
                callback = xhr.onload = xhr.onerror = null;
                if (type === "abort") {
                  xhr.abort();
                } else if (type === "error") {
                  complete(xhr.status, xhr.statusText);
                } else {
                  complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, typeof xhr.responseText === "string" ? { text: xhr.responseText } : undefined, xhr.getAllResponseHeaders());
                }
              }
            };
          };
          xhr.onload = callback();
          xhr.onerror = callback("error");
          callback = xhrCallbacks[id] = callback("abort");
          try {
            xhr.send(options.hasContent && options.data || null);
          } catch (e) {
            if (callback) {
              throw e;
            }
          }
        },
        abort: function () {
          if (callback) {
            callback();
          }
        }
      };
    }
  });
  jQuery.parseHTML = function (data, context, keepScripts) {
    if (!data || typeof data !== "string") {
      return null;
    }
    if (typeof context === "boolean") {
      keepScripts = context;
      context = false;
    }
    context = context || document;
    var parsed = rsingleTag.exec(data), scripts = !keepScripts && [];
    if (parsed) {
      return [context.createElement(parsed[1])];
    }
    parsed = jQuery.buildFragment([data], context, scripts);
    if (scripts && scripts.length) {
      jQuery(scripts).remove();
    }
    return jQuery.merge([], parsed.childNodes);
  };
  var _load = jQuery.fn.load;
  jQuery.fn.load = function (url, params, callback) {
    if (typeof url !== "string" && _load) {
      return _load.apply(this, arguments);
    }
    var selector, type, response, self = this, off = url.indexOf(" ");
    if (off >= 0) {
      selector = jQuery.trim(url.slice(off));
      url = url.slice(0, off);
    }
    if (jQuery.isFunction(params)) {
      callback = params;
      params = undefined;
    } else if (params && typeof params === "object") {
      type = "POST";
    }
    if (self.length > 0) {
      jQuery.ajax({
        url: url,
        type: type,
        dataType: "html",
        data: params
      }).done(function (responseText) {
        response = arguments;
        self.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : responseText);
      }).complete(callback && function (jqXHR, status) {
        self.each(callback, response || [
          jqXHR.responseText,
          status,
          jqXHR
        ]);
      });
    }
    return this;
  };
  jQuery.noConflict = function () {
  };
  return jQuery;


});
define('ibm/mobile/utils/http/BrowserHttpRequest', ['require', 'exports', 'module', '../../lib/IBMAjax', '../../lib/IBMUnderscore', '../../lib/IBMQ', './_HttpRequestMixin'], function (require, exports, module, jqXhr, _, Q, _HttpRequestMixin) {
  

var ErrorCommunicating = _HttpRequestMixin.errors.ErrorCommunicating, HttpRequestError = _HttpRequestMixin.errors.HttpRequestError, ErrorServerStatus = _HttpRequestMixin.errors.ErrorServerStatus;
  var BrowserHttpRequest = _.extend({}, _HttpRequestMixin, {
    browserRequestModule: jqXhr,
    _onError: function (defer) {
      return function (jqXhr, textStatus, exception) {
        if (jqXhr.status > 0) {
          defer.reject(ErrorServerStatus(jqXhr.status, jqXhr.responseText, { exception: exception }));
        } else {
          defer.reject(ErrorCommunicating({
            status: textStatus,
            exception: exception
          }));
        }
      };
    },
    _onSuccess: function (defer) {
      return function (response) {
        defer.resolve(response);
      };
    },
    _send: function (options) {
      var map = {
        "method": "type",
        "handleAs": "dataType"
      };
      var requestOptions = this.createOptions(map, options), defer = Q.defer();
      if (requestOptions.contentType == "multipart") {
        if (File && FileList && FormData) {
          requestOptions.processData = false;
          if (!(requestOptions.data instanceof FormData)) {
            var formFields = requestOptions.data;
            var fd = new FormData();
            _.keys(formFields).forEach(function (key) {
              fd.append(key, formFields[key]);
            });
            requestOptions.data = fd;
          }
        } else {
          defer.reject(new Error("Your browser does not support " + "sending multipart forms via ajax."));
        }
      }
      requestOptions["contentType"] = false;
      requestOptions.success = this._onSuccess(defer);
      requestOptions.error = this._onError(defer);
      this.browserRequestModule.ajax(requestOptions);
      return defer.promise.catch(function (err) {
        if (err && err.info) {
          err.info.requestHeaders = requestOptions.headers;
          err.info.requestOptions = requestOptions;
        }
        return Q.reject(err);
      });
    }
  });
  return BrowserHttpRequest;


});
define('ibm/mobile/utils/IBMHttpRequest', ['require', 'exports', 'module', '../lib/IBMUnderscore', '../lib/IBMQ', './http/NodeHttpRequest', './http/BrowserHttpRequest', './IBMLogger', './IBMUtils'], function (require, exports, module, _, Q, NodeHttpRequest, BrowserHttpRequest, IBMLogger, utils) {
  var __umodule__ = (function (require, exports, module, _, Q, NodeHttpRequest, BrowserHttpRequest, IBMLogger, utils) {
  

var isNode = utils.isNode(), logger = IBMLogger.getLogger(), realRequest = isNode ? NodeHttpRequest : BrowserHttpRequest;
  function httpRequestFunction(options, req) {
    options = options || {};
    if (isNode && _.isObject(req) && _.isObject(req.headers)) {
      var reqHeaders = req.headers, ibmHeaders;
      var ibmMatchedHeaders = _.keys(reqHeaders).filter(function (headerName) {
        return headerName.substr(0, 3).toUpperCase() === "IBM";
      });
      var ibmHeaders = _.object(ibmMatchedHeaders.map(function (headerName) {
        return [
          headerName.toUpperCase(),
          reqHeaders[headerName]
        ];
      }));
      options.headers = options.headers || {};
      _.extend(options.headers, ibmHeaders);
    }
    return realRequest.send.apply(realRequest, [options]);
  }
  [
    "get",
    "post",
    "put",
    "del"
  ].forEach(function (method) {
    httpRequestFunction[method] = function (url, options, req) {
      options = options || {};
      options.url = url;
      if (method == "del") {
        method = "delete";
      }
      options.method = method;
      return httpRequestFunction(options, req);
    };
  });
  return httpRequestFunction;


}).call(this, require, exports, module, _, Q, NodeHttpRequest, BrowserHttpRequest, IBMLogger, utils);
var __old__ibmhttp_request0 = window['IBMHttpRequest'];
window['IBMHttpRequest'] = __umodule__;

__umodule__.noConflict = function () {
  window['IBMHttpRequest'] = __old__ibmhttp_request0;
return __umodule__;
};
return __umodule__;
});
define('ibm/mobile/utils/IBMUriBuilder', ['require','exports','module'],function (require, exports, module) {
  var __umodule__ = (function (require, exports, module) {
  

"use strict";
  function IBMUriBuilder(string) {
    if (!(this instanceof IBMUriBuilder)) {
      throw new TypeError("IBMUriBuilder constructor cannot be called as a function.");
    }
    if (string !== undefined) {
      this._uri = string;
    }
    return this;
  }
  ;
  IBMUriBuilder.prototype = {
    _uri: "",
    constructor: IBMUriBuilder,
    append: function (segment) {
      if (segment.indexOf("/") === 0) {
        segment = segment.substr(1);
      }
      if (this._uri.substr(-1) === "/") {
        this._uri += segment;
      } else {
        this._uri += "/" + segment;
      }
      return this;
    },
    slash: function () {
      if (this._uri.substr(-1) !== "/") {
        this._uri += "/";
      }
      return this;
    }
  };
  IBMUriBuilder.prototype.toString = function () {
    return this._uri;
  };
  return IBMUriBuilder;


}).call(this, require, exports, module);
var __old__ibmuri_builder0 = window['IBMUriBuilder'];
window['IBMUriBuilder'] = __umodule__;

__umodule__.noConflict = function () {
  window['IBMUriBuilder'] = __old__ibmuri_builder0;
return __umodule__;
};
return __umodule__;
});
define('ibm/mobile/core/IBMCurrentUser', ['require', 'exports', 'module', '../lib/IBMUnderscore'], function (require, exports, module, _) {
  

function IBMCurrentUser(userInfo) {
    var validFields = _.keys(IBMCurrentUser.prototype), fieldsToSet = _.chain(userInfo).keys().intersection(validFields).value();
    fieldsToSet.forEach(function (field) {
      this[field] = userInfo[field];
    }.bind(this));
  }
  IBMCurrentUser.prototype = {
    uuid: null,
    securityProvider: null,
    securityToken: null,
    isVerified: false
  };
  return IBMCurrentUser;


});
define('ibm/mobile/core/IBMCurrentDevice', ['require', 'exports', 'module', '../lib/IBMUnderscore', '../utils/IBMLogger', '../utils/IBMUtils'], function (require, exports, module, _, IBMLogger, utils) {
  

var logger = IBMLogger.getLogger();
  var DEVICES = {};
  DEVICES.PLATFORM = {
    NODE: "NODE",
    WEB: "WEB",
    HYBRID: "HYBRID"
  };
  DEVICES.PLATFORM_VERSION = {
    NODE: "Node Version: $version",
    WEB: "OS: $platform"
  };
  DEVICES.DEVICE_NAME = {
    NODE: "Node $version, Platform: $platform, Arch: $arch",
    WEB: "Vendor: $vendor, Browser: $browser"
  };
  var HARDWARE_ID_STORAGE_KEY = "com.ibm.ibmbluemix.hardwareId";
  function getHardwareId() {
    var hardwareId;
    if (!utils.isNode()) {
      if (window && window.localStorage) {
        hardwareId = localStorage.getItem(HARDWARE_ID_STORAGE_KEY);
      } else {
      }
      if (!hardwareId) {
        hardwareId = utils.generateUUID();
        localStorage.setItem(HARDWARE_ID_STORAGE_KEY, hardwareId);
      }
    } else {
      if (process && process.env) {
        hardwareId = process.env.TERM_SESSION_ID;
      }
      if (!hardwareId) {
        hardwareId = utils.generateUUID();
      }
    }
    return hardwareId;
  }
  function WebDeviceInfo() {
    var nav = navigator || window["navigator"] || {}, platformInfo = {
        platform: nav.platform,
        vendor: nav.vendor,
        browser: nav.appVersion
      };
    if (_.isEmpty(nav)) {
      logger.error("Unable to access browser's navigator object");
    }
    return {
      hardwareId: getHardwareId(),
      model: nav.userAgent,
      platform: DEVICES.PLATFORM.WEB,
      platformVersion: utils.replace(DEVICES.PLATFORM_VERSION.WEB, platformInfo),
      name: utils.replace(DEVICES.DEVICE_NAME.WEB, platformInfo)
    };
  }
  function NodeDeviceInfo() {
    var proc = process || {}, plaformInfo = {
        version: proc.version,
        arch: proc.arch,
        platform: proc.platform
      };
    return {
      hardwareId: getHardwareId(),
      model: proc.platform,
      platform: DEVICES.PLATFORM.NODE,
      platformVersion: utils.replace(DEVICES.PLATFORM_VERSION.NODE, plaformInfo),
      name: utils.replace(DEVICES.DEVICE_NAME.NODE, plaformInfo)
    };
  }
  function IBMCurrentDevice(deviceInfo) {
    var validFields = _.keys(IBMCurrentDevice.prototype), fieldsToSet = _.chain(deviceInfo).keys().intersection(validFields).value();
    fieldsToSet.forEach(function (field) {
      this[field] = deviceInfo[field];
    }.bind(this));
  }
  IBMCurrentDevice.getDevice = function () {
    if (!IBMCurrentDevice.device) {
      IBMCurrentDevice.device = new IBMCurrentDevice(utils.isNode() ? NodeDeviceInfo() : WebDeviceInfo());
    }
    return IBMCurrentDevice.device;
  };
  IBMCurrentDevice.DEVICES = DEVICES;
  IBMCurrentDevice.prototype = {
    hardwareId: null,
    model: null,
    platform: null,
    platformVersion: null,
    name: null,
    currentLocation: null,
    uuid: null,
    toString: function () {
      return _.pairs(this).map(function (pair) {
        var key = pair[0], val = pair[1];
        return key + ": " + val;
      }).join(", ");
    }
  };
  return IBMCurrentDevice;


});
define('ibm/mobile/_IBMBluemix', ['require', 'exports', 'module', './lib/IBMUnderscore', './lib/IBMQ', './utils/IBMError', './utils/IBMLogger', './utils/IBMUriBuilder', './utils/IBMUtils', './core/IBMCurrentUser', './core/IBMCurrentDevice'], function (require, exports, module, _, Q, error, ibmLogger) {
  

var logger = ibmLogger.getLogger();
  var _IBMBluemix = {
    VERSION: "1.0.0.20150720-1718",
    config: {},
    initialize: function (config) {
      logger.debug("IBMBluemix: initializing version: " + this.getVersion());
      return this._init.apply(this, _.toArray(arguments));
    },
    _init: function () {
      return Q.reject("_IBMBluemix._init() unimplemented");
    },
    getConfig: function () {
      return Q.reject("_IBMBluemix.getConfig() unimplemented");
    },
    getVersion: function () {
      return this.VERSION;
    },
    getLogger: function () {
      return ibmLogger.getLogger.apply(ibmLogger, arguments);
    }
  };
  return _IBMBluemix;


});
define('ibm/mobile/core/IBMBluemixConfig', ['require', 'exports', 'module', '../lib/IBMUnderscore', '../lib/IBMQ', '../utils/IBMLogger', './IBMCurrentDevice', './IBMCurrentUser', '../utils/IBMUtils', '../utils/IBMUriBuilder'], function (require, exports, module, _, Q, IBMLogger, IBMCurrentDevice, IBMCurrentUser, utils, IBMUriBuilder) {
  

var IBMHttpRequest = undefined;
  "use strict";
  var isNode = utils.isNode(), logger = IBMLogger.getLogger();
  var MAS_URI = "/mas/v1/apps/$appId/users";
  function IBMBluemixConfig(config) {
    if (!(this instanceof IBMBluemixConfig)) {
      throw "IBMBluemixConfig constructor cannot be called as a function.";
    }
    if (!config && _.isObject(config)) {
      throw "initilize needs a valid configuration";
    }
    IBMBluemixConfig.validateConfig(config);
    _.extend(this, config);
    logger.debug("IBMBluemixConfig details: ", this);
    try {
      this._parseApplicationRoute();
    } catch (err) {
      logger.error("Error parsing applicationRoute: " + err);
      throw Error(err);
    }
    this.currentDevice = IBMCurrentDevice.getDevice();
  }
  function getIBMHttpRequest() {
    var defer = Q.defer();
    if (IBMHttpRequest) {
      defer.resolve(IBMHttpRequest);
    } else {
      require(["../utils/IBMHttpRequest"], function (httpModule) {
        IBMHttpRequest = httpModule;
        defer.resolve(IBMHttpRequest);
      });
    }
    return defer.promise;
  }
  IBMBluemixConfig.validateConfig = function (config) {
    var missingOptions = _.values(IBMBluemixConfig.RequiredConfigOptions).filter(function (option) {
      var hasRequiredOption = _.has(config, option) && !_.isEmpty(config[option]);
      if (!hasRequiredOption) {
        return option;
      }
    });
    if (missingOptions.length > 0) {
      var errMsg = "Missing required config options: " + missingOptions.join(", ");
      logger.error(errMsg);
      throw new Error(errMsg);
    }
  };
  IBMBluemixConfig.RequiredConfigOptions = {
    APPLICATION_ID: "applicationId",
    APPLICATION_ROUTE: "applicationRoute",
    APPLICATION_SECRET: "applicationSecret"
  };
  if (utils.isNode()) {
    delete IBMBluemixConfig.RequiredConfigOptions["APPLICATION_SECRET"];
  }
  IBMBluemixConfig.SecurityProvider = Object.freeze({
    GOOGLE: "GOOGLE",
    WORKLIGHT: "WORKLIGHT"
  });
  IBMBluemixConfig.prototype = {
    baasURL: null,
    applicationId: null,
    applicationRoute: null,
    applicationHostName: null,
    applicationSecret: null,
    rewriteDomain: null,
    deviceType: IBMCurrentDevice.getDevice().platform,
    currentDevice: null,
    currentUser: null,
    version: null,
    packageId: "",
    timeout: 10000,
    SLASH: "/",
    STAGE1: "stage1",
    SUBZONE: "subzone",
    BLUEMIX_DOMAIN: "bluemix.net",
    QUERY_PARAM_HOSTNAME: "hostname",
    constructor: IBMBluemixConfig,
    getBaaSURL: function () {
      return this.baasURL;
    },
    setTimeout: function (timeout) {
      if (_.isNaN(timeout)) {
        throw "Invalid timeout";
      } else {
        this.timeout = timeout;
      }
    },
    setBaaSURL: function (baasURL) {
      if (_.isNull(baasURL) || _.isUndefined(baasURL) || _.isEmpty(baasURL)) {
        throw "Invalid baas URL";
      } else {
        this.baasURL = baasURL;
      }
    },
    setApplicationId: function (applicationId) {
      if (_.isNull(applicationId) || _.isUndefined(applicationId) || _.isEmpty(applicationId)) {
        throw "Invalid Application Id";
      } else {
        this.applicationId = applicationId;
      }
    },
    getApplicationId: function () {
      return this.applicationId;
    },
    getCurrentUser: function () {
      return this.currentUser;
    },
    getCurrentDevice: function () {
      return this.currentDevice;
    },
    getApplicationHostName: function () {
      return this.applicationHostName;
    },
    getTimeout: function () {
      return this.timeout;
    },
    setSecurityToken: function (token, provider) {
      if (_.isEmpty(provider) || _.isEmpty(token)) {
        return Q.reject("Provider and token must be set.");
      }
      var isValidProvider = _.chain(IBMBluemixConfig.SecurityProvider).values().contains(provider).value(), self = this;
      if (!isValidProvider) {
        return Q.reject("Given provider is not supported: " + provider);
      }
      var currentUser = new IBMCurrentUser({
          uuid: null,
          securityProvider: provider,
          securityToken: token,
          isVerified: false
        }), masUrl = new IBMUriBuilder(self.baasURL).append(utils.replace(MAS_URI, { appId: self.applicationId }));
      this.currentUser = currentUser;
      return getIBMHttpRequest().then(function (IBMHttpRequest) {
        return IBMHttpRequest.post(masUrl.toString(), {
          handleAs: "json",
          contentType: "json",
          timeout: 30000
        });
      }).then(function (response) {
        var userInfo = response.user, userUuid = userInfo && userInfo.uuid, deviceInfo = response.device, deviceUuid = deviceInfo && deviceInfo.uuid;
        logger.debug("userInfo: ", userInfo);
        logger.debug("deviceInfo: ", deviceInfo);
        if (!userUuid || !deviceUuid) {
          var err = {
            message: "Unexpected response from server. Missing user UUID or device UUID",
            userInfo: userInfo,
            deviceInfo: deviceInfo
          };
          return Q.reject(err);
        } else {
          self.currentUser.uuid = userUuid;
          self.currentUser.isVerified = true;
          self.currentDevice.uuid = deviceUuid;
          return Q.resolve(self.currentUser);
        }
      }).catch(function (error) {
        var err = {
          message: "Error setting security token.",
          error: error
        };
        logger.error(err);
        self.currentUser = null;
        return Q.reject(err);
      });
    },
    getSecurityContext: function () {
      return this.oauth;
    },
    getClientPlatformType: function () {
      return this.deviceType;
    },
    getRewriteDomain: function () {
      return this.rewriteDomain;
    },
    getPort: function () {
      return isNode ? this.port : null;
    },
    getContextRoot: function () {
      return isNode ? "/" + this.applicationHostName + "/v1/apps/" + this.applicationId : null;
    },
    getVcapApplication: function () {
      return isNode ? this.vcapApplication : null;
    },
    getVcapServices: function () {
      return isNode ? this.vcapServices : null;
    },
    getVcapService: function (serviceName) {
      return isNode ? this.vcapServices[serviceName] : null;
    },
    _removeSlashes: function (source) {
      var result = source;
      if (result.lastIndexOf(this.SLASH, 0) === 0) {
        result = result.substring(1);
      }
      if (result.indexOf(this.SLASH, result.length - this.SLASH.length) !== -1) {
        result = result.substring(0, result.length - 1);
      }
      return result;
    },
    parseUri: function (str) {
      var options = {
        strictMode: false,
        key: [
          "source",
          "protocol",
          "authority",
          "userInfo",
          "user",
          "password",
          "host",
          "port",
          "relative",
          "path",
          "directory",
          "file",
          "query",
          "anchor"
        ],
        q: {
          name: "queryKey",
          parser: /(?:^|&)([^&=]*)=?([^&]*)/g
        },
        parser: {
          strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
          loose: /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/
        }
      };
      var o = options, m = o.parser[o.strictMode ? "strict" : "loose"].exec(str), uri = {}, i = 14;
      while (i--)
        uri[o.key[i]] = m[i] || "";
      uri[o.q.name] = {};
      uri[o.key[12]].replace(o.q.parser, function ($0, $1, $2) {
        if ($1)
          uri[o.q.name][$1] = $2;
      });
      return uri;
    },
    _parseApplicationRoute: function () {
      var actualApplicationRoute = this._removeSlashes(this.applicationRoute.trim());
      if (actualApplicationRoute.indexOf("http") === -1) {
        actualApplicationRoute = "https://" + actualApplicationRoute;
      } else if (actualApplicationRoute.indexOf("https") === -1 && actualApplicationRoute.indexOf("bluemix") != -1) {
        actualApplicationRoute = actualApplicationRoute.substring(4);
        actualApplicationRoute = "https" + actualApplicationRoute;
      }
      var url = this.parseUri(actualApplicationRoute);
      var urlBuffer = "";
      var newBaasUrl = null;
      var newApplicationHostName = null;
      var newApplicationRoute = actualApplicationRoute;
      var newRewriteDomain = null;
      var regionInDomain = "ng";
      var urlBuffer = urlBuffer.concat(url.protocol).concat("://").concat(url.host);
      if (url.port != "") {
        var urlBuffer = urlBuffer.concat(":").concat(url.port);
      }
      var newBaasURL = urlBuffer.toString();
      var subzone = null;
      var hostName = null;
      var query = url.getQuery;
      if (query != null) {
        var params = query.split("&");
        params.forEach(function (queryParam) {
          var keyValue = queryParam.split("=");
          if (keyValue.length != 2) {
            return;
          }
          if (keyValue[0].equals(this.SUBZONE)) {
            subzone = keyValue[1];
          } else if (keyValue[0].equals(this.QUERY_PARAM_HOSTNAME)) {
            hostName = keyValue[1];
          }
        });
      }
      var urlPaths = url.host.split(".");
      if (hostName != null && !_.isEqual(hostName, this.EMPTY_STRING)) {
        newApplicationHostName = hostName;
      } else if (urlPaths != null && urlPaths.length > 0) {
        newApplicationHostName = urlPaths[0];
      }
      if (newBaasURL.indexOf(this.STAGE1) == -1) {
        if (urlPaths != null && urlPaths.length == 4) {
          regionInDomain = urlPaths[urlPaths.length - 3];
        }
        newRewriteDomain = regionInDomain + "." + this.BLUEMIX_DOMAIN;
      } else {
        if (urlPaths != null && urlPaths.length == 5) {
          regionInDomain = urlPaths[urlPaths.length - 3];
        }
        if (subzone != null && !_.isEqual(subzone, "")) {
          newRewriteDomain = this.STAGE1 + "-" + subzone + "." + regionInDomain + "." + this.BLUEMIX_DOMAIN;
        } else {
          newRewriteDomain = this.STAGE1 + "." + regionInDomain + "." + this.BLUEMIX_DOMAIN;
        }
      }
      if (newApplicationHostName != null && newRewriteDomain != null && !_.isEqual(newApplicationHostName, "") && !_.isEqual(newApplicationRoute, "") && !_.isEqual(newBaasURL, "") && !_.isEqual(newRewriteDomain, "")) {
        this.applicationHostName = newApplicationHostName;
        this.baasURL = newBaasURL;
        this.rewriteDomain = newRewriteDomain;
      }
    }
  };
  return IBMBluemixConfig;


});
define('ibm/mobile/utils/IBMConfig', ['require','exports','module'],function (require, exports, module) {
  

var VCAP_SERVICES_NAME = "VCAP_SERVICES";
  var VCAP_APPLICATION_NAME = "VCAP_APPLICATION";
  var VCAP_APP_PORT_NAME = "VCAP_APP_PORT";
  var MANIFEST_FILE_NAME = "manifest.yml";
  var envLog = null;
  var VCAP_APPLICATION_ENVLOG = null;
  var VCAP_SERVICES_ENVLOG = null;
  var VCAP_APP_PORT_ENVLOG = null;
  var vcapApplication = {};
  var vcapServices = {};
  var appGUID = null;
  var mbaasConfig = {};
  var appName = null;
  function getConfigurations(applicationName) {
    if (applicationName) {
      appName = applicationName;
    }
    if (process.env.VCAP_APPLICATION && process.env.VCAP_SERVICES) {
      vcapApplication = JSON.parse(process.env.VCAP_APPLICATION);
      vcapServices = JSON.parse(process.env.VCAP_SERVICES);
      exportConfiguration();
    } else {
      if (!envLog) {
        if (!appName) {
          var mainModule = require && (require.main || __nodeRequire.main);
          if (mainModule) {
            var manifestFilePath = path.dirname(mainModule.filename) + "/" + MANIFEST_FILE_NAME;
            if (fs.existsSync(manifestFilePath)) {
              var manifest = yamljs.load(fs.readFileSync(manifestFilePath)), manifestApps = manifest["applications"];
              if (manifestApps && manifestApps[0] && manifestApps[0].name) {
                appName = manifestApps[0].name;
              } else {
                appName = false;
              }
            }
          }
        }
        if (appName) {
          var result = exec("cf files " + appName + " logs/env.log", { silent: true });
          if (result.code == 0) {
            envLog = result.output;
          } else {
            console.log("cf files command status: " + result.output);
          }
        } else {
          console.log("can not get the application name, so the default values will be used. You can set the application name either by passing it as a parameter or using a manifest.yml in your application.");
        }
      }
      if (envLog) {
        VCAP_SERVICES_ENVLOG = getValueFromEnvLog(VCAP_SERVICES_NAME);
        if (VCAP_SERVICES_ENVLOG) {
          vcapServices = JSON.parse(VCAP_SERVICES_ENVLOG);
        }
        VCAP_APPLICATION_ENVLOG = getValueFromEnvLog(VCAP_APPLICATION_NAME);
        if (VCAP_APPLICATION_ENVLOG) {
          vcapApplication = JSON.parse(VCAP_APPLICATION_ENVLOG);
        }
        VCAP_APP_PORT_ENVLOG = getValueFromEnvLog(VCAP_APP_PORT_NAME);
      }
      exportConfiguration();
    }
    return mbaasConfig;
  }
  ;
  function exportConfiguration() {
    mbaasConfig.port = process.env.VCAP_APP_PORT || VCAP_APP_PORT_ENVLOG || 3000;
    if (getApplicationId()) {
      mbaasConfig.applicationId = getApplicationId();
    }
    mbaasConfig.vcapApplication = vcapApplication;
    mbaasConfig.vcapServices = vcapServices;
  }
  function getValueFromEnvLog(key) {
    var value = null;
    if (envLog) {
      var leftStr = envLog;
      var curLine = null;
      while (leftStr) {
        if (leftStr.indexOf("\n") != -1) {
          curLine = leftStr.substr(0, leftStr.indexOf("\n"));
          leftStr = leftStr.substr(leftStr.indexOf("\n") + 1);
        } else {
          curLine = leftStr;
          leftStr = null;
        }
        if (curLine.indexOf("=") != -1) {
          curKey = curLine.substr(0, curLine.indexOf("="));
          curValue = curLine.substr(curLine.indexOf("=") + 1);
          if (curKey == key) {
            value = curValue;
            break;
          }
        }
      }
    }
    return value;
  }
  function getHostname() {
    if (vcapApplication.uris && vcapApplication.uris[0]) {
      return vcapApplication.uris[0].split(".")[0];
    }
    return "mbaas";
  }
  function getApplicationId() {
    return vcapApplication.application_id ? vcapApplication.application_id : undefined;
  }
  return { getConfigurations: getConfigurations };


});
define('ibm/mobile/IBMBluemix', ['require', 'exports', 'module', './lib/IBMUnderscore', './lib/IBMQ', './utils/IBMHttpRequest', './_IBMBluemix', './core/IBMBluemixConfig', './utils/IBMConfig', './utils/IBMLogger', './utils/IBMUtils'], function (require, exports, module, _, Q, xhr, _IBMBluemix, IBMBluemixConfig, IBMConfig, IBMLogger, utils) {
  var __umodule__ = (function (require, exports, module, _, Q, xhr, _IBMBluemix, IBMBluemixConfig, IBMConfig, IBMLogger, utils) {
  

var logger = IBMLogger.getLogger();
  var IBMBluemix = _.extend({}, _IBMBluemix, {
    _init: function (config) {
      var defer = Q.defer();
      if (!config || !_.isObject(config)) {
        defer.reject("initialize needs a valid configuration");
        return defer.promise;
      }
      config = _.clone(config);
      try {
        IBMBluemixConfig.validateConfig(config);
      } catch (err) {
        logger.error("Invalid config provided.", err);
        defer.reject(err);
      }
      try {
        if (utils.isNode()) {
          var mbaasConfig = IBMConfig.getConfigurations(config.applicationName);
          var nonEmptyValues = _.chain(mbaasConfig).pairs().filter(function (pair) {
            var val = pair[1];
            return !_.isUndefined(val) && !_.isNull(val);
          }).object().value();
          _.extend(config, mbaasConfig);
        }
        this.config = new IBMBluemixConfig(config);
      } catch (e) {
        logger.error(e);
        defer.reject("Invalid config has been passed to the initialize method");
      }
      defer.resolve(this.config);
      return defer.promise;
    },
    getConfig: function () {
      if (!_.isObject(this.config)) {
        throw new Error("No config has been defined");
      }
      return this.config;
    },
    getCurrentUser: function () {
      var currentUser = null;
      if (_.isFunction(this.config.getCurrentUser)) {
        currentUser = this.config.getCurrentUser();
        if (currentUser && !currentUser.isVerified) {
          currentUser = null;
        }
      } else {
        throw new Error("The SDK has not been initialized");
      }
      return currentUser;
    },
    getCurrentDevice: function () {
      var currentDevice = null;
      if (_.isFunction(this.config.getCurrentDevice)) {
        currentDevice = this.config.getCurrentDevice();
      } else {
        throw new Error("The SDK has not been initialized");
      }
      return currentDevice;
    },
    setSecurityToken: function (token, provider) {
      var defer = Q.defer();
      try {
        this.config.setSecurityToken(token, provider).done(function (currentUser) {
          logger.debug("setSecurityToken - onSuccess.");
          defer.resolve(currentUser);
        }, function (error) {
          logger.error("setSecurityToken - onFailure", error);
          defer.reject(error);
        });
      } catch (error) {
        var err = {
          message: "Unexpected error in setSecurityToken call.",
          error: error
        };
        logger.error(err.message);
        defer.reject(err);
      }
      return defer.promise;
    },
    clearSecurityToken: function () {
      if (_.isFunction(this.config.getCurrentUser)) {
        this.config.currentUser = null;
      } else {
        throw new Error("The SDK has not been initialized");
      }
      return Q.resolve(true);
    },
    setPackageId: function (packageId) {
      if (_.isString(this.config.packageId)) {
        this.config.packageId = packageId;
      } else {
        throw new Error("The SDK has not been initialized");
      }
    },
    SecurityProvider: IBMBluemixConfig.SecurityProvider
  });
  return IBMBluemix;


}).call(this, require, exports, module, _, Q, xhr, _IBMBluemix, IBMBluemixConfig, IBMConfig, IBMLogger, utils);
var __old__ibmbluemix0 = window['IBMBluemix'];
window['IBMBluemix'] = __umodule__;

__umodule__.noConflict = function () {
  window['IBMBluemix'] = __old__ibmbluemix0;
return __umodule__;
};
return __umodule__;
});
    return require('ibm/mobile/IBMBluemix');
  };
if (__isAMD) {
  return define(bundleFactory);
} else {
    if (__isNode) {
        return module.exports = bundleFactory();
    } else {
        return bundleFactory();
    }
}
}).call(this, (typeof exports === 'object' ? global : window),
              (typeof exports === 'object' ? global : window))